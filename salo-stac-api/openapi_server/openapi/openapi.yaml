openapi: 3.0.1
info:
  contact:
    name: STAC Specification
    url: http://stacspec.org
  description: This is an OpenAPI definition of the core SpatioTemporal Asset Catalog
    API specification. Any service that implements this endpoint to allow search of
    spatiotemporal assets can be considered a STAC API. The endpoint is also available
    as an OpenAPI fragment that can be integrated with other OpenAPI definitions,
    and is designed to slot seamlessly into a OGC API - Features definition.
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  title: The SpatioTemporal Asset Catalog API + Extensions
  version: 0.9.0
servers:
- description: Development server
  url: http://dev.cool-sat.com
- description: Production server
  url: http://www.cool-sat.com
tags:
- description: essential characteristics of this API
  name: Capabilities
- description: access to data (features)
  name: Data
- description: Extension to OGC API - Features to support STAC metadata model and
    search API
  name: STAC
- description: STAC-specific operations to add, remove, and edit items within OGC
    API - Features collections.
  name: Transaction Extension
paths:
  /:
    get:
      description: |-
        Returns the root STAC Catalog or STAC Collection that is the entry point
        for users to browse with STAC Browser or for search engines to crawl.
        This can either return a single STAC Collection or more commonly a STAC
        catalog.

        The landing page provides links to the API definition, the conformance
        statements, the collections and sub-catalogs.
      operationId: get_landing_page
      responses:
        "200":
          content:
            application/json:
              example:
                title: NAIP Imagery
                description: Catalog of NAIP Imagery.
                links:
                - href: http://data.example.org/
                  rel: self
                  type: application/json
                  title: this document
                - href: http://data.example.org/api
                  rel: service-desc
                  type: application/vnd.oai.openapi+json;version=3.0
                  title: the API definition
                - href: http://data.example.org/api.html
                  rel: service-doc
                  type: text/html
                  title: the API documentation
                - href: http://data.example.org/conformance
                  rel: conformance
                  type: application/json
                  title: OGC API conformance classes implemented by this server
                - href: http://data.example.org/collections
                  rel: data
                  type: application/json
                  title: Information about the feature collections
                - href: http://data.example.org/search
                  rel: search
                  type: application/json
                  title: Search across feature collections
                stac_version: 0.9.0
                id: naip
              schema:
                $ref: '#/components/schemas/landingPage'
            text/html:
              schema:
                type: string
          description: |-
            The landing page provides links to the API definition
            (link relations `service-desc` and `service-doc`),
            the Conformance declaration (path `/conformance`,
            link relation `conformance`), and the Feature
            Collections (path `/collections`, link relation
            `data`).

            Links to the search endpoints (path `/search`, link relation `search`,
            method `GET` or `POST`) are **required** to be specified if the API
            implements `/search` for any of the specified HTTP methods.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: landing page
      tags:
      - Capabilities
      x-openapi-router-controller: openapi_server.controllers.capabilities_controller
  /collections:
    get:
      operationId: get_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collections'
            text/html:
              schema:
                type: string
          description: |-
            The feature collections shared by this API.

            The dataset is organized as one or more feature collections. This resource
            provides information about and access to the collections.

            The response contains the list of collections. For each collection, a link
            to the items in the collection (path `/collections/{collectionId}/items`,
            link relation `items`) as well as key information about the collection.
            This information includes:

            * A local identifier for the collection that is unique for the dataset;
            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: the feature collections in the dataset
      tags:
      - Capabilities
      x-openapi-router-controller: openapi_server.controllers.capabilities_controller
  /collections/{collectionId}:
    get:
      operationId: describe_collection
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
            text/html:
              schema:
                type: string
          description: |-
            Information about the feature collection with id `collectionId`.

            The response contains a link to the items in the collection
            (path `/collections/{collectionId}/items`, link relation `items`)
            as well as key information about the collection. This information
            includes:

            * A local identifier for the collection that is unique for the dataset;
            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: describe the feature collection with id `collectionId`
      tags:
      - Capabilities
      x-openapi-router-controller: openapi_server.controllers.capabilities_controller
  /collections/{collectionId}/items:
    get:
      description: |-
        Fetch features of the feature collection with id `collectionId`.

        Every feature in a dataset belongs to a collection. A dataset may
        consist of multiple feature collections. A feature collection is often a
        collection of features of a similar type, based on a common schema.

        Use content negotiation to request HTML or GeoJSON.
      operationId: get_features
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 10000
          minimum: 1
          type: integer
        style: form
      - description: |-
          Only features that have a geometry that intersects the bounding box are selected.
          The bounding box is provided as four or six numbers, depending on
          whether the coordinate reference system includes a vertical axis (height
          or depth):

          * Lower left corner, coordinate axis 1
          * Lower left corner, coordinate axis 2
          * Minimum value, coordinate axis 3 (optional)
          * Upper right corner, coordinate axis 1
          * Upper right corner, coordinate axis 2
          * Maximum value, coordinate axis 3 (optional)

          The coordinate reference system of the values is WGS 84
          longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless
          a different coordinate reference system is specified in the parameter
          `bbox-crs`.

          For WGS 84 longitude/latitude the values are in most cases the sequence
          of minimum longitude, minimum latitude, maximum longitude and maximum
          latitude. However, in cases where the box spans the antimeridian the
          first value (west-most box edge) is larger than the third value
          (east-most box edge).

          If the vertical axis is included, the third and the sixth number are
          the bottom and the top of the 3-dimensional bounding box.

          If a feature has multiple spatial geometry properties, it is the
          decision of the server whether only a single spatial geometry property
          is used to determine the extent or all relevant geometries.

          Example: The bounding box of the New Zealand Exclusive Economic Zone in
          WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be
          represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as
          `bbox=160.6,-55.95,-170,-25.89`.
        explode: false
        in: query
        name: bbox
        required: false
        schema:
          items:
            type: number
          maxItems: 6
          minItems: 4
          type: array
        style: form
      - description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only features that have a temporal property that intersects the value of
          `datetime` are selected.

          If a feature has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        explode: false
        in: query
        name: datetime
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/featureCollectionGeoJSON'
            text/html:
              schema:
                type: string
          description: |-
            The response is a document consisting of features in the collection.
            The features included in the response are determined by the server
            based on the query parameters of the request. To support access to
            larger collections without overloading the client, the API supports
            paged access with links to the next page, if more features are selected
            that the page size.

            The `bbox` and `datetime` parameter can be used to select only a
            subset of the features in the collection (the features that are in the
            bounding box or time interval). The `bbox` parameter matches all features
            in the collection that are not associated with a location, too. The
            `datetime` parameter matches all features in the collection that are
            not associated with a time stamp or interval, too.

            The `limit` parameter may be used to control the subset of the
            selected features that should be returned in the response, the page size.
            Each page may include information about the number of selected and
            returned features (`numberMatched` and `numberReturned`) as well as
            links to support paging (link relation `next`).
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A query parameter has an invalid value.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: fetch features
      tags:
      - Data
      x-openapi-router-controller: openapi_server.controllers.data_controller
    post:
      description: create a new feature in a specific collection
      operationId: post_feature
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/item'
              - $ref: '#/components/schemas/itemCollection'
      responses:
        "201":
          content:
            application/geo+json:
              schema:
                type: string
            text/html:
              schema:
                type: string
          description: Status of the create request.
          headers:
            Location:
              description: A link to the item
              explode: false
              schema:
                format: url
                type: string
              style: simple
            ETag:
              description: A string to ensure the item has not been modified
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was malformed or semantically invalid
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was syntactically and semantically valid, but an
            error occurred while trying to act upon it
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: add a new feature to a collection
      tags:
      - Transaction Extension
      x-openapi-router-controller: openapi_server.controllers.transaction_extension_controller
  /collections/{collectionId}/items/{featureId}:
    delete:
      description: Use this method to delete an existing feature.
      operationId: delete_feature
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - description: Only take the action if the ETag of the item still matches
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Status of the delete request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was malformed or semantically invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was syntactically and semantically valid, but an
            error occurred while trying to act upon it
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: delete an existing feature by Id
      tags:
      - Transaction Extension
      x-openapi-router-controller: openapi_server.controllers.transaction_extension_controller
    get:
      description: |-
        Fetch the feature with id `featureId` in the feature collection
        with id `collectionId`.

        Use content negotiation to request HTML or GeoJSON.
      operationId: get_feature
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/item'
            text/html:
              schema:
                type: string
          description: |-
            fetch the feature with id `featureId` in the feature collection
            with id `collectionId`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: fetch a single feature
      tags:
      - Data
      x-openapi-router-controller: openapi_server.controllers.data_controller
    patch:
      description: Use this method to update an existing feature. Requires a GeoJSON
        fragement (containing the fields to be updated) be submitted.
      operationId: patch_feature
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - description: Only take the action if the ETag of the item still matches
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/partialItem'
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: Status of the update request.
          headers:
            ETag:
              description: A string to ensure the item has not been modified
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was malformed or semantically invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was syntactically and semantically valid, but an
            error occurred while trying to act upon it
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: update an existing feature by Id with a partial item definition
      tags:
      - Transaction Extension
      x-openapi-router-controller: openapi_server.controllers.transaction_extension_controller
    put:
      description: Use this method to update an existing feature. Requires the entire
        GeoJSON  description be submitted.
      operationId: put_feature
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - description: Only take the action if the ETag of the item still matches
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/item'
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: Status of the update request.
          headers:
            ETag:
              description: A string to ensure the item has not been modified
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was malformed or semantically invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The specified resource was not found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: Some condition specified by the request could not be met in
            the server
        "5XX":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
          description: The request was syntactically and semantically valid, but an
            error occurred while trying to act upon it
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: update an existing feature by Id with a complete item definition
      tags:
      - Transaction Extension
      x-openapi-router-controller: openapi_server.controllers.transaction_extension_controller
  /collections/{collectionId}/items/{featureId}/versions:
    get:
      description: returns a list of links for a versioned item
      operationId: collections_collection_id_items_feature_id_versions_get
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogDefinition'
          description: A catalog JSON definition the returns list of links of an item
            versions
      summary: returns a list of links for a versioned item
      tags:
      - Version Extension
      x-openapi-router-controller: openapi_server.controllers.version_extension_controller
  /collections/{collectionId}/items/{featureId}/versions/{versionId}:
    get:
      description: returns the requested version of an item
      operationId: collections_collection_id_items_feature_id_versions_version_id_get
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a feature
        explode: false
        in: path
        name: featureId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a version
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collections'
            text/html:
              schema:
                type: string
          description: |-
            The feature collections shared by this API.

            The dataset is organized as one or more feature collections. This resource
            provides information about and access to the collections.

            The response contains the list of collections. For each collection, a link
            to the items in the collection (path `/collections/{collectionId}/items`,
            link relation `items`) as well as key information about the collection.
            This information includes:

            * A local identifier for the collection that is unique for the dataset;
            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
      summary: returns the requested version of an item
      tags:
      - Version Extension
      x-openapi-router-controller: openapi_server.controllers.version_extension_controller
  /collections/{collectionId}/versions:
    get:
      description: returns a list of links for a versioned collection
      operationId: collections_collection_id_versions_get
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalogDefinition'
          description: A catalog JSON definition the returns list of links of a collection
            versions
      summary: returns a list of links for a versioned collection
      tags:
      - Version Extension
      x-openapi-router-controller: openapi_server.controllers.version_extension_controller
  /collections/{collectionId}/versions/{versionId}:
    get:
      description: returns the requested version of a collection
      operationId: collections_collection_id_versions_version_id_get
      parameters:
      - description: local identifier of a collection
        explode: false
        in: path
        name: collectionId
        required: true
        schema:
          type: string
        style: simple
      - description: local identifier of a version
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collections'
            text/html:
              schema:
                type: string
          description: |-
            The feature collections shared by this API.

            The dataset is organized as one or more feature collections. This resource
            provides information about and access to the collections.

            The response contains the list of collections. For each collection, a link
            to the items in the collection (path `/collections/{collectionId}/items`,
            link relation `items`) as well as key information about the collection.
            This information includes:

            * A local identifier for the collection that is unique for the dataset;
            * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
            * An optional title and description for the collection;
            * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
            * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
      summary: returns the requested version of a collection
      tags:
      - Version Extension
      x-openapi-router-controller: openapi_server.controllers.version_extension_controller
  /conformance:
    get:
      description: |-
        A list of all conformance classes specified in a standard that the
        server conforms to.
      operationId: get_conformance_declaration
      responses:
        "200":
          content:
            application/json:
              example:
                conformsTo:
                - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
                - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
                - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html
                - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
              schema:
                $ref: '#/components/schemas/confClasses'
            text/html:
              schema:
                type: string
          description: |-
            The URIs of all conformance classes supported by the server.

            To support "generic" clients that want to access multiple
            OGC API Features implementations - and not "just" a specific
            API / server, the server declares the conformance
            classes it implements and conforms to.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: A server error occurred.
      summary: information about specifications that this API conforms to
      tags:
      - Capabilities
      x-openapi-router-controller: openapi_server.controllers.capabilities_controller
  /search:
    get:
      description: |-
        Retrieve Items matching filters. Intended as a shorthand API for simple
        queries.

        This method is optional, but you MUST implement `POST /search` if you
        want to implement this method.

        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` to the
        `links` array in `GET /`. As `GET` is the default method, the `method`
        may not be set explicitly in the link.
      operationId: get_search_stac
      parameters:
      - description: |-
          Only features that have a geometry that intersects the bounding box are selected.
          The bounding box is provided as four or six numbers, depending on
          whether the coordinate reference system includes a vertical axis (height
          or depth):

          * Lower left corner, coordinate axis 1
          * Lower left corner, coordinate axis 2
          * Minimum value, coordinate axis 3 (optional)
          * Upper right corner, coordinate axis 1
          * Upper right corner, coordinate axis 2
          * Maximum value, coordinate axis 3 (optional)

          The coordinate reference system of the values is WGS 84
          longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless
          a different coordinate reference system is specified in the parameter
          `bbox-crs`.

          For WGS 84 longitude/latitude the values are in most cases the sequence
          of minimum longitude, minimum latitude, maximum longitude and maximum
          latitude. However, in cases where the box spans the antimeridian the
          first value (west-most box edge) is larger than the third value
          (east-most box edge).

          If the vertical axis is included, the third and the sixth number are
          the bottom and the top of the 3-dimensional bounding box.

          If a feature has multiple spatial geometry properties, it is the
          decision of the server whether only a single spatial geometry property
          is used to determine the extent or all relevant geometries.

          Example: The bounding box of the New Zealand Exclusive Economic Zone in
          WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be
          represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as
          `bbox=160.6,-55.95,-170,-25.89`.
        explode: false
        in: query
        name: bbox
        required: false
        schema:
          items:
            type: number
          maxItems: 6
          minItems: 4
          type: array
        style: form
      - description: |-
          Either a date-time or an interval, open or closed. Date and time expressions
          adhere to RFC 3339. Open intervals are expressed using double-dots.

          Examples:

          * A date-time: "2018-02-12T23:20:50Z"
          * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
          * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

          Only features that have a temporal property that intersects the value of
          `datetime` are selected.

          If a feature has multiple temporal properties, it is the decision of the
          server whether only a single temporal property is used to determine
          the extent or all relevant temporal properties.
        explode: false
        in: query
        name: datetime
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The optional limit parameter limits the number of items that are presented in the response document.

          Only items are counted that are on the first level of the collection in the response document.
          Nested objects contained within the explicitly requested items shall not be counted.

          Minimum = 1. Maximum = 10000. Default = 10.
        explode: false
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 10000
          minimum: 1
          type: integer
        style: form
      - description: |-
          Array of Item ids to return. All other filter parameters that further
          restrict the number of search results are ignored
        explode: false
        in: query
        name: ids
        required: false
        schema:
          $ref: '#/components/schemas/ids'
        style: form
      - description: |
          Array of Collection IDs to include in the search for items.
          Only Items in one of the provided Collections will be searched
        explode: false
        in: query
        name: collections
        required: false
        schema:
          $ref: '#/components/schemas/collectionsArray'
        style: form
      - description: query for properties in items. Use the JSON form of the queryFilter
          used in POST.
        explode: true
        in: query
        name: query
        required: false
        schema:
          type: string
        style: form
      - description: |-
          An array of property names, prefixed by either "+" for ascending or
          "-" for descending. If no prefix is provided, "+" is assumed.
        explode: false
        in: query
        name: sortby
        required: false
        schema:
          example: +id,-properties.eo:cloud_cover
          type: string
        style: form
      - description: Determines the shape of the features in the response
        explode: false
        in: query
        name: fields
        required: false
        schema:
          example: id,type,-geometry,bbox,properties,-links,-assets
          type: string
        style: form
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
          description: A feature collection.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: Search STAC items with simple filtering.
      tags:
      - STAC
      x-openapi-router-controller: openapi_server.controllers.stac_controller
    post:
      description: |-
        retrieve items matching filters. Intended as the standard, full-featured
        query API.

        This method is mandatory to implement if `GET /search` is implemented.
        If this endpoint is implemented on a server, it is required to add a
        link referring to this endpoint with `rel` set to `search` and `method`
        set to `POST` to the `links` array in `GET /`.
      operationId: post_search_stac
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchBody'
      responses:
        "200":
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/itemCollection'
            text/html:
              schema:
                type: string
          description: A feature collection.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
            text/html:
              schema:
                type: string
          description: An error occurred.
      summary: Search STAC items with full-featured filtering.
      tags:
      - STAC
      x-openapi-router-controller: openapi_server.controllers.stac_controller
components:
  parameters:
    bbox:
      description: |-
        Only features that have a geometry that intersects the bounding box are selected.
        The bounding box is provided as four or six numbers, depending on
        whether the coordinate reference system includes a vertical axis (height
        or depth):

        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)

        The coordinate reference system of the values is WGS 84
        longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless
        a different coordinate reference system is specified in the parameter
        `bbox-crs`.

        For WGS 84 longitude/latitude the values are in most cases the sequence
        of minimum longitude, minimum latitude, maximum longitude and maximum
        latitude. However, in cases where the box spans the antimeridian the
        first value (west-most box edge) is larger than the third value
        (east-most box edge).

        If the vertical axis is included, the third and the sixth number are
        the bottom and the top of the 3-dimensional bounding box.

        If a feature has multiple spatial geometry properties, it is the
        decision of the server whether only a single spatial geometry property
        is used to determine the extent or all relevant geometries.

        Example: The bounding box of the New Zealand Exclusive Economic Zone in
        WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be
        represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as
        `bbox=160.6,-55.95,-170,-25.89`.
      explode: false
      in: query
      name: bbox
      required: false
      schema:
        items:
          type: number
        maxItems: 6
        minItems: 4
        type: array
      style: form
    collectionId:
      description: local identifier of a collection
      explode: false
      in: path
      name: collectionId
      required: true
      schema:
        type: string
      style: simple
    datetime:
      description: |-
        Either a date-time or an interval, open or closed. Date and time expressions
        adhere to RFC 3339. Open intervals are expressed using double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      explode: false
      in: query
      name: datetime
      required: false
      schema:
        type: string
      style: form
    featureId:
      description: local identifier of a feature
      explode: false
      in: path
      name: featureId
      required: true
      schema:
        type: string
      style: simple
    limit:
      description: |-
        The optional limit parameter limits the number of items that are presented in the response document.

        Only items are counted that are on the first level of the collection in the response document.
        Nested objects contained within the explicitly requested items shall not be counted.

        Minimum = 1. Maximum = 10000. Default = 10.
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 10
        maximum: 10000
        minimum: 1
        type: integer
      style: form
    ids:
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      explode: false
      in: query
      name: ids
      required: false
      schema:
        $ref: '#/components/schemas/ids'
      style: form
    collectionsArray:
      description: |
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched
      explode: false
      in: query
      name: collections
      required: false
      schema:
        $ref: '#/components/schemas/collectionsArray'
      style: form
    query:
      description: query for properties in items. Use the JSON form of the queryFilter
        used in POST.
      explode: true
      in: query
      name: query
      required: false
      schema:
        type: string
      style: form
    sortby:
      description: |-
        An array of property names, prefixed by either "+" for ascending or
        "-" for descending. If no prefix is provided, "+" is assumed.
      explode: false
      in: query
      name: sortby
      required: false
      schema:
        example: +id,-properties.eo:cloud_cover
        type: string
      style: form
    fields:
      description: Determines the shape of the features in the response
      explode: false
      in: query
      name: fields
      required: false
      schema:
        example: id,type,-geometry,bbox,properties,-links,-assets
        type: string
      style: form
    IfMatch:
      description: Only take the action if the ETag of the item still matches
      explode: false
      in: header
      name: If-Match
      required: true
      schema:
        type: string
      style: simple
    IfMatchOptional:
      description: Only take the action if the ETag of the item still matches
      explode: false
      in: header
      name: If-Match
      required: false
      schema:
        type: string
      style: simple
    versionId:
      description: local identifier of a version
      explode: false
      in: path
      name: versionId
      required: true
      schema:
        type: string
      style: simple
  responses:
    LandingPage:
      content:
        application/json:
          example:
            title: NAIP Imagery
            description: Catalog of NAIP Imagery.
            links:
            - href: http://data.example.org/
              rel: self
              type: application/json
              title: this document
            - href: http://data.example.org/api
              rel: service-desc
              type: application/vnd.oai.openapi+json;version=3.0
              title: the API definition
            - href: http://data.example.org/api.html
              rel: service-doc
              type: text/html
              title: the API documentation
            - href: http://data.example.org/conformance
              rel: conformance
              type: application/json
              title: OGC API conformance classes implemented by this server
            - href: http://data.example.org/collections
              rel: data
              type: application/json
              title: Information about the feature collections
            - href: http://data.example.org/search
              rel: search
              type: application/json
              title: Search across feature collections
            stac_version: 0.9.0
            id: naip
          schema:
            $ref: '#/components/schemas/landingPage'
        text/html:
          schema:
            type: string
      description: |-
        The landing page provides links to the API definition
        (link relations `service-desc` and `service-doc`),
        the Conformance declaration (path `/conformance`,
        link relation `conformance`), and the Feature
        Collections (path `/collections`, link relation
        `data`).

        Links to the search endpoints (path `/search`, link relation `search`,
        method `GET` or `POST`) are **required** to be specified if the API
        implements `/search` for any of the specified HTTP methods.
    ConformanceDeclaration:
      content:
        application/json:
          example:
            conformsTo:
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html
            - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
          schema:
            $ref: '#/components/schemas/confClasses'
        text/html:
          schema:
            type: string
      description: |-
        The URIs of all conformance classes supported by the server.

        To support "generic" clients that want to access multiple
        OGC API Features implementations - and not "just" a specific
        API / server, the server declares the conformance
        classes it implements and conforms to.
    Collections:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collections'
        text/html:
          schema:
            type: string
      description: |-
        The feature collections shared by this API.

        The dataset is organized as one or more feature collections. This resource
        provides information about and access to the collections.

        The response contains the list of collections. For each collection, a link
        to the items in the collection (path `/collections/{collectionId}/items`,
        link relation `items`) as well as key information about the collection.
        This information includes:

        * A local identifier for the collection that is unique for the dataset;
        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
    Collection:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collection'
        text/html:
          schema:
            type: string
      description: |-
        Information about the feature collection with id `collectionId`.

        The response contains a link to the items in the collection
        (path `/collections/{collectionId}/items`, link relation `items`)
        as well as key information about the collection. This information
        includes:

        * A local identifier for the collection that is unique for the dataset;
        * A list of coordinate reference systems (CRS) in which geometries may be returned by the server. The first CRS is the default coordinate reference system (the default is always WGS 84 with axis order longitude/latitude);
        * An optional title and description for the collection;
        * An optional extent that can be used to provide an indication of the spatial and temporal extent of the collection - typically derived from the data;
        * An optional indicator about the type of the items in the collection (the default value, if the indicator is not provided, is 'feature').
    Features:
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
        text/html:
          schema:
            type: string
      description: |-
        The response is a document consisting of features in the collection.
        The features included in the response are determined by the server
        based on the query parameters of the request. To support access to
        larger collections without overloading the client, the API supports
        paged access with links to the next page, if more features are selected
        that the page size.

        The `bbox` and `datetime` parameter can be used to select only a
        subset of the features in the collection (the features that are in the
        bounding box or time interval). The `bbox` parameter matches all features
        in the collection that are not associated with a location, too. The
        `datetime` parameter matches all features in the collection that are
        not associated with a time stamp or interval, too.

        The `limit` parameter may be used to control the subset of the
        selected features that should be returned in the response, the page size.
        Each page may include information about the number of selected and
        returned features (`numberMatched` and `numberReturned`) as well as
        links to support paging (link relation `next`).
    Feature:
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/item'
        text/html:
          schema:
            type: string
      description: |-
        fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
    InvalidParameter:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A query parameter has an invalid value.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
      description: The specified resource was not found
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
        text/html:
          schema:
            type: string
      description: A server error occurred.
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
      description: The request was malformed or semantically invalid
    PreconditionFailed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
      description: Some condition specified by the request could not be met in the
        server
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/exception'
      description: The request was syntactically and semantically valid, but an error
        occurred while trying to act upon it
  schemas:
    collection:
      example:
        stac_version: 0.9.0
        stac_extensions: []
        id: Sentinel-2
        title: 'Sentinel-2 MSI: MultiSpectral Instrument, Level-1C'
        description: |
          Sentinel-2 is a wide-swath, high-resolution, multi-spectral
          imaging mission...
        license: proprietary
        keywords:
        - copernicus
        - esa
        - eu
        - msi
        - radiance
        - sentinel
        providers:
        - name: ESA
          roles:
          - producer
          - licensor
          url: https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
        extent:
          spatial:
            bbox:
            - - -180
              - -56
              - 180
              - 83
          temporal:
            interval:
            - - 2015-06-23T00:00:00Z
              - 2019-07-10T13:44:56Z
        summaries:
          datetime:
            min: 2015-06-23T00:00:00Z
            max: 2019-07-10T13:44:56Z
          sci:citation:
          - Copernicus Sentinel data [Year]
          eo:gsd:
          - 10
          - 30
          - 60
          platform:
          - sentinel-2a
          - sentinel-2b
          constellation:
          - sentinel-2
          instruments:
          - msi
          view:off_nadir:
            min: 0
            max: 100
          view:sun_elevation:
            min: 6.78
            max: 89.9
          eo:bands:
          - - name: B1
              common_name: coastal
              center_wavelength: 4.439
            - name: B2
              common_name: blue
              center_wavelength: 4.966
            - name: B3
              common_name: green
              center_wavelength: 5.6
            - name: B4
              common_name: red
              center_wavelength: 6.645
            - name: B5
              center_wavelength: 7.039
            - name: B6
              center_wavelength: 7.402
            - name: B7
              center_wavelength: 7.825
            - name: B8
              common_name: nir
              center_wavelength: 8.351
            - name: B8A
              center_wavelength: 8.648
            - name: B9
              center_wavelength: 9.45
            - name: B10
              center_wavelength: 1.3735
            - name: B11
              common_name: swir16
              center_wavelength: 1.6137
            - name: B12
              common_name: swir22
              center_wavelength: 2.2024
        links:
        - rel: self
          href: http://cool-sat.com/collections/Sentinel-2
        - rel: root
          href: http://cool-sat.com/collections
        - rel: license
          href: https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
          title: Legal notice on the use of Copernicus Sentinel Data and Service Information
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          example: address
          type: string
        title:
          description: human readable title of the collection
          example: address
          type: string
        description:
          description: |-
            Detailed multi-line description to fully explain the catalog or
            collection.

            [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
            text representation.
          type: string
        links:
          example:
          - href: http://data.example.com/buildings
            rel: item
          - href: http://example.com/concepts/buildings.html
            rel: describedBy
            type: text/html
          items:
            $ref: '#/components/schemas/link'
          type: array
        extent:
          $ref: '#/components/schemas/extent'
        itemType:
          default: feature
          description: indicator about the type of the items in the collection (the
            default value is 'feature').
          type: string
        crs:
          default:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          description: the list of coordinate reference systems supported by the service
          example:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          - http://www.opengis.net/def/crs/EPSG/0/4326
          items:
            type: string
          type: array
        stac_version:
          example: 0.9.0
          title: STAC version
          type: string
        stac_extensions:
          items:
            anyOf:
            - format: uri
              title: Reference to a JSON Schema
              type: string
            - title: Reference to a core extension
              type: string
          title: STAC extensions
          type: array
          uniqueItems: true
        keywords:
          description: List of keywords describing the collection.
          items:
            type: string
          type: array
        license:
          description: |-
            License(s) of the data as a SPDX
            [License identifier](https://spdx.org/licenses/). Alternatively, use
            `proprietary` if the license is not on the SPDX license list or
            `various` if multiple licenses apply. In these two cases links to the
            license texts SHOULD be added, see the `license` link relation type.

            Non-SPDX licenses SHOULD add a link to the license text with the
            `license` relation in the links section. The license text MUST NOT be
            provided as a value of this field. If there is no public license URL
            available, it is RECOMMENDED to host the license text and
            link to it.
          example: Apache-2.0
          type: string
        providers:
          description: A list of providers, which may include all organizations capturing
            or processing the data or the hosting provider. Providers should be listed
            in chronological order with the most recent provider being the last element
            of the list.
          items:
            properties:
              name:
                description: The name of the organization or the individual.
                type: string
              description:
                description: |-
                  Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.

                  CommonMark 0.29 syntax MAY be used for rich text representation.
                type: string
              roles:
                description: |-
                  Roles of the provider.

                  The provider's role(s) can be one or more of the following
                  elements:

                  * licensor: The organization that is licensing the dataset under
                    the license specified in the collection's license field.
                  * producer: The producer of the data is the provider that
                    initially captured and processed the source data, e.g. ESA for
                    Sentinel-2 data.
                  * processor: A processor is any provider who processed data to a
                    derived product.
                  * host: The host is the actual provider offering the data on their
                    storage. There should be no more than one host, specified as last
                    element of the list.
                items:
                  enum:
                  - producer
                  - licensor
                  - processor
                  - host
                  type: string
                type: array
              url:
                description: Homepage on which the provider describes the dataset
                  and publishes contact information.
                format: url
                type: string
            required:
            - name
            title: Provider
            type: object
          type: array
        summaries:
          additionalProperties:
            oneOf:
            - items:
                description: A value of any type.
              title: Set of values
              type: array
            - description: |-
                By default, only ranges with a minimum and a maximum value can
                be specified. Ranges can be specified for ordinal values only,
                which means they need to have a rank order. Therefore, ranges
                can only be specified for numbers and some special types of
                strings. Examples: grades (A to F), dates or times.
                Implementors are free to add other derived statistical values
                to the object, for example `mean` or `stddev`.
              properties:
                min:
                  anyOf:
                  - type: string
                  - type: number
                max:
                  anyOf:
                  - type: string
                  - type: number
              required:
              - max
              - min
              title: Statistics
              type: object
          description: |-
            Summaries are either a unique set of all available values *or*
            statistics. Statistics by default only specify the range (minimum
            and maximum values), but can optionally be accompanied by additional
            statistical values. The range can specify the potential range of
            values, but it is recommended to be as precise as possible. The set
            of values must contain at least one element and it is strongly
            recommended to list all values. It is recommended to list as many
            properties as reasonable so that consumers get a full overview of
            the Collection. Properties that are covered by the Collection
            specification (e.g. `providers` and `license`) may not be repeated
            in the summaries.
          type: object
      required:
      - description
      - extent
      - id
      - license
      - links
      - stac_version
      type: object
    collections:
      example:
        collections:
        - stac_version: 0.9.0
          stac_extensions: []
          id: Sentinel-2
          title: 'Sentinel-2 MSI: MultiSpectral Instrument, Level-1C'
          description: |
            Sentinel-2 is a wide-swath, high-resolution, multi-spectral
            imaging mission...
          license: proprietary
          keywords:
          - copernicus
          - esa
          - eu
          - msi
          - radiance
          - sentinel
          providers:
          - name: ESA
            roles:
            - producer
            - licensor
            url: https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
          extent:
            spatial:
              bbox:
              - - -180
                - -56
                - 180
                - 83
            temporal:
              interval:
              - - 2015-06-23T00:00:00Z
                - 2019-07-10T13:44:56Z
          summaries:
            datetime:
              min: 2015-06-23T00:00:00Z
              max: 2019-07-10T13:44:56Z
            sci:citation:
            - Copernicus Sentinel data [Year]
            eo:gsd:
            - 10
            - 30
            - 60
            platform:
            - sentinel-2a
            - sentinel-2b
            constellation:
            - sentinel-2
            instruments:
            - msi
            view:off_nadir:
              min: 0
              max: 100
            view:sun_elevation:
              min: 6.78
              max: 89.9
            eo:bands:
            - - name: B1
                common_name: coastal
                center_wavelength: 4.439
              - name: B2
                common_name: blue
                center_wavelength: 4.966
              - name: B3
                common_name: green
                center_wavelength: 5.6
              - name: B4
                common_name: red
                center_wavelength: 6.645
              - name: B5
                center_wavelength: 7.039
              - name: B6
                center_wavelength: 7.402
              - name: B7
                center_wavelength: 7.825
              - name: B8
                common_name: nir
                center_wavelength: 8.351
              - name: B8A
                center_wavelength: 8.648
              - name: B9
                center_wavelength: 9.45
              - name: B10
                center_wavelength: 1.3735
              - name: B11
                common_name: swir16
                center_wavelength: 1.6137
              - name: B12
                common_name: swir22
                center_wavelength: 2.2024
          links:
          - rel: self
            href: http://cool-sat.com/collections/Sentinel-2
          - rel: root
            href: http://cool-sat.com/collections
          - rel: license
            href: https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
            title: Legal notice on the use of Copernicus Sentinel Data and Service
              Information
        - stac_version: 0.9.0
          stac_extensions: []
          id: Sentinel-2
          title: 'Sentinel-2 MSI: MultiSpectral Instrument, Level-1C'
          description: |
            Sentinel-2 is a wide-swath, high-resolution, multi-spectral
            imaging mission...
          license: proprietary
          keywords:
          - copernicus
          - esa
          - eu
          - msi
          - radiance
          - sentinel
          providers:
          - name: ESA
            roles:
            - producer
            - licensor
            url: https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
          extent:
            spatial:
              bbox:
              - - -180
                - -56
                - 180
                - 83
            temporal:
              interval:
              - - 2015-06-23T00:00:00Z
                - 2019-07-10T13:44:56Z
          summaries:
            datetime:
              min: 2015-06-23T00:00:00Z
              max: 2019-07-10T13:44:56Z
            sci:citation:
            - Copernicus Sentinel data [Year]
            eo:gsd:
            - 10
            - 30
            - 60
            platform:
            - sentinel-2a
            - sentinel-2b
            constellation:
            - sentinel-2
            instruments:
            - msi
            view:off_nadir:
              min: 0
              max: 100
            view:sun_elevation:
              min: 6.78
              max: 89.9
            eo:bands:
            - - name: B1
                common_name: coastal
                center_wavelength: 4.439
              - name: B2
                common_name: blue
                center_wavelength: 4.966
              - name: B3
                common_name: green
                center_wavelength: 5.6
              - name: B4
                common_name: red
                center_wavelength: 6.645
              - name: B5
                center_wavelength: 7.039
              - name: B6
                center_wavelength: 7.402
              - name: B7
                center_wavelength: 7.825
              - name: B8
                common_name: nir
                center_wavelength: 8.351
              - name: B8A
                center_wavelength: 8.648
              - name: B9
                center_wavelength: 9.45
              - name: B10
                center_wavelength: 1.3735
              - name: B11
                common_name: swir16
                center_wavelength: 1.6137
              - name: B12
                common_name: swir22
                center_wavelength: 2.2024
          links:
          - rel: self
            href: http://cool-sat.com/collections/Sentinel-2
          - rel: root
            href: http://cool-sat.com/collections
          - rel: license
            href: https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
            title: Legal notice on the use of Copernicus Sentinel Data and Service
              Information
        links:
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
      properties:
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        collections:
          items:
            $ref: '#/components/schemas/collection'
          type: array
      required:
      - collections
      - links
      type: object
    confClasses:
      example:
        conformsTo:
        - conformsTo
        - conformsTo
      properties:
        conformsTo:
          items:
            type: string
          type: array
      required:
      - conformsTo
      type: object
    exception:
      description: 'Information about the exception: an error code plus an optional
        description.'
      properties:
        code:
          type: string
        description:
          type: string
      required:
      - code
      type: object
    extent:
      description: |-
        The extent of the features in the collection. In the Core only spatial and temporal
        extents are specified. Extensions may add additional members to represent other
        extents, for example, thermal or pressure ranges.
      properties:
        spatial:
          $ref: '#/components/schemas/extent_spatial'
        temporal:
          $ref: '#/components/schemas/extent_temporal'
      required:
      - spatial
      - temporal
      type: object
    featureCollectionGeoJSON:
      example:
        timeStamp: 2017-08-17T08:05:32Z
        features:
        - stac_version: 0.9.0
          stac_extensions:
          - eo
          - view
          - https://example.com/cs-extension/1.0/schema.json
          type: Feature
          id: CS3-20160503_132131_05
          bbox:
          - -122.59750209
          - 37.48803556
          - -122.2880486
          - 37.613537207
          geometry:
            type: Polygon
            coordinates:
            - - - -122.308150179
                - 37.488035566
              - - -122.597502109
                - 37.538869539
              - - -122.576687533
                - 37.613537207
              - - -122.2880486
                - 37.562818007
              - - -122.308150179
                - 37.488035566
          properties:
            datetime: 2016-05-03T13:22:30.040Z
            title: A CS3 item
            license: PDDL-1.0
            providers:
            - name: CoolSat
              roles:
              - producer
              - licensor
              url: https://cool-sat.com/
            view:sun_azimuth: 168.7
            eo:cloud_cover: 0.12
            view:off_nadir: 1.4
            platform: coolsat2
            instruments:
            - cool_sensor_v1
            eo:bands: []
            view:sun_elevation: 33.4
            eo:gsd: 0.512
          collection: CS3
          links:
          - rel: self
            href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
          - rel: root
            href: http://cool-sat.com/collections
          - rel: parent
            href: http://cool-sat.com/collections/CS3
          - rel: collection
            href: http://cool-sat.com/collections/CS3
          assets:
            analytic:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
              title: 4-Band Analytic
            thumbnail:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
              title: Thumbnail
        - stac_version: 0.9.0
          stac_extensions:
          - eo
          - view
          - https://example.com/cs-extension/1.0/schema.json
          type: Feature
          id: CS3-20160503_132131_05
          bbox:
          - -122.59750209
          - 37.48803556
          - -122.2880486
          - 37.613537207
          geometry:
            type: Polygon
            coordinates:
            - - - -122.308150179
                - 37.488035566
              - - -122.597502109
                - 37.538869539
              - - -122.576687533
                - 37.613537207
              - - -122.2880486
                - 37.562818007
              - - -122.308150179
                - 37.488035566
          properties:
            datetime: 2016-05-03T13:22:30.040Z
            title: A CS3 item
            license: PDDL-1.0
            providers:
            - name: CoolSat
              roles:
              - producer
              - licensor
              url: https://cool-sat.com/
            view:sun_azimuth: 168.7
            eo:cloud_cover: 0.12
            view:off_nadir: 1.4
            platform: coolsat2
            instruments:
            - cool_sensor_v1
            eo:bands: []
            view:sun_elevation: 33.4
            eo:gsd: 0.512
          collection: CS3
          links:
          - rel: self
            href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
          - rel: root
            href: http://cool-sat.com/collections
          - rel: parent
            href: http://cool-sat.com/collections/CS3
          - rel: collection
            href: http://cool-sat.com/collections/CS3
          assets:
            analytic:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
              title: 4-Band Analytic
            thumbnail:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
              title: Thumbnail
        numberReturned: 10
        links:
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        type: FeatureCollection
        numberMatched: 127
      properties:
        type:
          enum:
          - FeatureCollection
          type: string
        features:
          items:
            $ref: '#/components/schemas/item'
          type: array
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        timeStamp:
          description: This property indicates the time and date when the response
            was generated.
          example: 2017-08-17T08:05:32Z
          format: date-time
          type: string
        numberMatched:
          description: |-
            The number of features of the feature type that match the selection
            parameters like `bbox`.
          example: 127
          minimum: 0
          type: integer
        numberReturned:
          description: |-
            The number of features in the feature collection.

            A server may omit this information in a response, if the information
            about the number of features is not known or difficult to compute.

            If the value is provided, the value shall be identical to the number
            of items in the "features" array.
          example: 10
          minimum: 0
          type: integer
      required:
      - features
      - type
      type: object
    featureGeoJSON:
      properties:
        type:
          enum:
          - Feature
          type: string
        geometry:
          $ref: '#/components/schemas/geometryGeoJSON'
        properties:
          nullable: true
          type: object
        id:
          oneOf:
          - type: string
          - type: integer
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
      required:
      - geometry
      - properties
      - type
      type: object
    geometryGeoJSON:
      oneOf:
      - $ref: '#/components/schemas/pointGeoJSON'
      - $ref: '#/components/schemas/multipointGeoJSON'
      - $ref: '#/components/schemas/linestringGeoJSON'
      - $ref: '#/components/schemas/multilinestringGeoJSON'
      - $ref: '#/components/schemas/polygonGeoJSON'
      - $ref: '#/components/schemas/multipolygonGeoJSON'
      - $ref: '#/components/schemas/geometrycollectionGeoJSON'
    geometrycollectionGeoJSON:
      properties:
        type:
          enum:
          - GeometryCollection
          type: string
        geometries:
          items:
            $ref: '#/components/schemas/geometryGeoJSON'
          type: array
      required:
      - geometries
      - type
      type: object
    landingPage:
      example:
        stac_version: 0.9.0
        description: Access to data about buildings in the city of Bonn via a Web
          API that conforms to the OGC API Features specification.
        links:
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        id: id
        title: Buildings in Bonn
        stac_extensions:
        - ""
        - ""
      properties:
        title:
          example: Buildings in Bonn
          type: string
        description:
          example: Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
          type: string
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        stac_version:
          example: 0.9.0
          title: STAC version
          type: string
        stac_extensions:
          items:
            anyOf:
            - format: uri
              title: Reference to a JSON Schema
              type: string
            - title: Reference to a core extension
              type: string
          title: STAC extensions
          type: array
          uniqueItems: true
        id:
          type: string
      required:
      - description
      - id
      - links
      - stac_version
      type: object
    linestringGeoJSON:
      properties:
        type:
          enum:
          - LineString
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          minItems: 2
          type: array
      required:
      - coordinates
      - type
      type: object
    link:
      example:
        headers:
          Accept: application/json
        hreflang: en
        method: GET
        merge: false
        rel: child
        length: 0
        href: http://www.geoserver.example/stac/naip/child/catalog.json
        type: application/geo+json
        title: NAIP Child Catalog
        body: '{}'
      properties:
        href:
          example: http://www.geoserver.example/stac/naip/child/catalog.json
          format: url
          type: string
        rel:
          example: child
          type: string
        type:
          example: application/geo+json
          type: string
        hreflang:
          example: en
          type: string
        title:
          example: NAIP Child Catalog
          type: string
        length:
          type: integer
        method:
          default: GET
          description: Specifies the HTTP method that the link expects
          enum:
          - GET
          - POST
          type: string
        headers:
          description: Object key values pairs they map to headers
          example:
            Accept: application/json
          type: object
        body:
          description: For POST requests, the link can specify the HTTP body as a
            JSON object.
          type: object
        merge:
          default: false
          description: |-
            This is only valid when the server is responding to POST request.

            If merge is true, the client is expected to merge the body value
            into the current request body before following the link.
            This avoids passing large post bodies back and forth when following
            links, particularly for navigating pages through the `POST /search`
            endpoint.

            NOTE: To support form encoding it is expected that a client be able
            to merge in the key value pairs specified as JSON
            `{"next": "token"}` will become `&next=token`.
          type: boolean
      required:
      - href
      - rel
      title: Link
      type: object
    multilinestringGeoJSON:
      properties:
        type:
          enum:
          - MultiLineString
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 2
            type: array
          type: array
      required:
      - coordinates
      - type
      type: object
    multipointGeoJSON:
      properties:
        type:
          enum:
          - MultiPoint
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          type: array
      required:
      - coordinates
      - type
      type: object
    multipolygonGeoJSON:
      properties:
        type:
          enum:
          - MultiPolygon
          type: string
        coordinates:
          items:
            items:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 4
              type: array
            type: array
          type: array
      required:
      - coordinates
      - type
      type: object
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      example: 127
      minimum: 0
      type: integer
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      example: 10
      minimum: 0
      type: integer
    pointGeoJSON:
      properties:
        type:
          enum:
          - Point
          type: string
        coordinates:
          items:
            type: number
          minItems: 2
          type: array
      required:
      - coordinates
      - type
      type: object
    polygonGeoJSON:
      properties:
        type:
          enum:
          - Polygon
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 4
            type: array
          type: array
      required:
      - coordinates
      - type
      type: object
    timeStamp:
      description: This property indicates the time and date when the response was
        generated.
      example: 2017-08-17T08:05:32Z
      format: date-time
      type: string
    description:
      description: |-
        Detailed multi-line description to fully explain the catalog or
        collection.

        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
        text representation.
      type: string
    license:
      description: |-
        License(s) of the data as a SPDX
        [License identifier](https://spdx.org/licenses/). Alternatively, use
        `proprietary` if the license is not on the SPDX license list or
        `various` if multiple licenses apply. In these two cases links to the
        license texts SHOULD be added, see the `license` link relation type.

        Non-SPDX licenses SHOULD add a link to the license text with the
        `license` relation in the links section. The license text MUST NOT be
        provided as a value of this field. If there is no public license URL
        available, it is RECOMMENDED to host the license text and
        link to it.
      example: Apache-2.0
      type: string
    providers:
      description: A list of providers, which may include all organizations capturing
        or processing the data or the hosting provider. Providers should be listed
        in chronological order with the most recent provider being the last element
        of the list.
      items:
        properties:
          name:
            description: The name of the organization or the individual.
            type: string
          description:
            description: |-
              Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.

              CommonMark 0.29 syntax MAY be used for rich text representation.
            type: string
          roles:
            description: |-
              Roles of the provider.

              The provider's role(s) can be one or more of the following
              elements:

              * licensor: The organization that is licensing the dataset under
                the license specified in the collection's license field.
              * producer: The producer of the data is the provider that
                initially captured and processed the source data, e.g. ESA for
                Sentinel-2 data.
              * processor: A processor is any provider who processed data to a
                derived product.
              * host: The host is the actual provider offering the data on their
                storage. There should be no more than one host, specified as last
                element of the list.
            items:
              enum:
              - producer
              - licensor
              - processor
              - host
              type: string
            type: array
          url:
            description: Homepage on which the provider describes the dataset and
              publishes contact information.
            format: url
            type: string
        required:
        - name
        title: Provider
        type: object
      type: array
    searchBody:
      allOf:
      - $ref: '#/components/schemas/bboxFilter'
      - $ref: '#/components/schemas/datetimeFilter'
      - $ref: '#/components/schemas/intersectsFilter'
      - $ref: '#/components/schemas/collectionsFilter'
      - $ref: '#/components/schemas/idsFilter'
      - $ref: '#/components/schemas/limitFilter'
      - $ref: '#/components/schemas/queryFilter'
      - $ref: '#/components/schemas/sortFilter'
      - $ref: '#/components/schemas/fieldsFilter'
      description: The search criteria
      type: object
    limit:
      default: 10
      description: The maximum number of results to return (page size). Defaults to
        10
      example: 10
      maximum: 10000
      minimum: 1
      type: integer
    bbox:
      description: "Only features that have a geometry that intersects the bounding\
        \ box are\nselected. The bounding box is provided as four or six numbers,\n\
        depending on whether the coordinate reference system includes a\nvertical\
        \ axis (elevation or depth):\n\n* Lower left corner, coordinate axis 1\n*\
        \ Lower left corner, coordinate axis 2  \n* Lower left corner, coordinate\
        \ axis 3 (optional) \n* Upper right corner, coordinate axis 1 \n* Upper right\
        \ corner, coordinate axis 2 \n* Upper right corner, coordinate axis 3 (optional)\n\
        \nThe coordinate reference system of the values is WGS84\nlongitude/latitude\
        \ (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless\na different coordinate\
        \ reference system is specified in the parameter\n`bbox-crs`.\n\nFor WGS84\
        \ longitude/latitude the values are in most cases the sequence\nof minimum\
        \ longitude, minimum latitude, maximum longitude and maximum\nlatitude. However,\
        \ in cases where the box spans the antimeridian the\nfirst value (west-most\
        \ box edge) is larger than the third value\n(east-most box edge).\n\nIf a\
        \ feature has multiple spatial geometry properties, it is the\ndecision of\
        \ the server whether only a single spatial geometry property\nis used to determine\
        \ the extent or all relevant geometries.\n\nExample: The bounding box of the\
        \ New Zealand Exclusive Economic Zone in\nWGS 84 (from 160.6°E to 170°W and\
        \ from 55.95°S to 25.89°S) would be\nrepresented in JSON as `[160.6, -55.95,\
        \ -170, -25.89]` and in a query as\n`bbox=160.6,-55.95,-170,-25.89`."
      example:
      - -110
      - 39.5
      - -105
      - 40.5
      items:
        type: number
      maxItems: 6
      minItems: 4
      type: array
    bboxFilter:
      description: Only return items that intersect the provided bounding box.
      properties:
        bbox:
          description: "Only features that have a geometry that intersects the bounding\
            \ box are\nselected. The bounding box is provided as four or six numbers,\n\
            depending on whether the coordinate reference system includes a\nvertical\
            \ axis (elevation or depth):\n\n* Lower left corner, coordinate axis 1\n\
            * Lower left corner, coordinate axis 2  \n* Lower left corner, coordinate\
            \ axis 3 (optional) \n* Upper right corner, coordinate axis 1 \n* Upper\
            \ right corner, coordinate axis 2 \n* Upper right corner, coordinate axis\
            \ 3 (optional)\n\nThe coordinate reference system of the values is WGS84\n\
            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless\n\
            a different coordinate reference system is specified in the parameter\n\
            `bbox-crs`.\n\nFor WGS84 longitude/latitude the values are in most cases\
            \ the sequence\nof minimum longitude, minimum latitude, maximum longitude\
            \ and maximum\nlatitude. However, in cases where the box spans the antimeridian\
            \ the\nfirst value (west-most box edge) is larger than the third value\n\
            (east-most box edge).\n\nIf a feature has multiple spatial geometry properties,\
            \ it is the\ndecision of the server whether only a single spatial geometry\
            \ property\nis used to determine the extent or all relevant geometries.\n\
            \nExample: The bounding box of the New Zealand Exclusive Economic Zone\
            \ in\nWGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would\
            \ be\nrepresented in JSON as `[160.6, -55.95, -170, -25.89]` and in a\
            \ query as\n`bbox=160.6,-55.95,-170,-25.89`."
          example:
          - -110
          - 39.5
          - -105
          - 40.5
          items:
            type: number
          maxItems: 6
          minItems: 4
          type: array
      type: object
    collectionsArray:
      description: |-
        Array of Collection IDs to include in the search for items.
        Only Items in one of the provided Collections will be searched.
      items:
        type: string
      type: array
    ids:
      description: |-
        Array of Item ids to return. All other filter parameters that further
        restrict the number of search results are ignored
      items:
        type: string
      type: array
    datetimeFilter:
      description: An object representing a date+time based filter.
      properties:
        datetime:
          description: |-
            Either a date-time or an interval, open or closed. Date and time
            expressions adhere to RFC 3339. Open intervals are expressed using
            double-dots.

            Examples:

            * A date-time: "2018-02-12T23:20:50Z"
            * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
            * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

            Only features that have a temporal property that intersects the value of
            `datetime` are selected.

            If a feature has multiple temporal properties, it is the decision of the
            server whether only a single temporal property is used to determine
            the extent or all relevant temporal properties.
          example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
          type: string
      type: object
    intersectsFilter:
      description: Only returns items that intersect with the provided polygon.
      properties:
        intersects:
          $ref: '#/components/schemas/Geometry'
      type: object
    limitFilter:
      description: Only returns maximum number of results (page size)
      properties:
        limit:
          default: 10
          description: The maximum number of results to return (page size). Defaults
            to 10
          example: 10
          maximum: 10000
          minimum: 1
          type: integer
      type: object
    idsFilter:
      description: Only returns items that match the array of given ids
      properties:
        ids:
          description: |-
            Array of Item ids to return. All other filter parameters that further
            restrict the number of search results are ignored
          items:
            type: string
          type: array
      type: object
    collectionsFilter:
      description: Only returns the collections specified
      properties:
        collections:
          description: |-
            Array of Collection IDs to include in the search for items.
            Only Items in one of the provided Collections will be searched.
          items:
            type: string
          type: array
      type: object
    datetime:
      description: |-
        Either a date-time or an interval, open or closed. Date and time
        expressions adhere to RFC 3339. Open intervals are expressed using
        double-dots.

        Examples:

        * A date-time: "2018-02-12T23:20:50Z"
        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

        Only features that have a temporal property that intersects the value of
        `datetime` are selected.

        If a feature has multiple temporal properties, it is the decision of the
        server whether only a single temporal property is used to determine
        the extent or all relevant temporal properties.
      example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
      type: string
    stac_version:
      example: 0.9.0
      title: STAC version
      type: string
    stac_extensions:
      items:
        anyOf:
        - format: uri
          title: Reference to a JSON Schema
          type: string
        - title: Reference to a core extension
          type: string
      title: STAC extensions
      type: array
      uniqueItems: true
    itemCollection:
      description: A GeoJSON FeatureCollection augmented with foreign members that
        contain values relevant to a STAC entity
      example:
        features:
        - stac_version: 0.9.0
          stac_extensions:
          - eo
          - view
          - https://example.com/cs-extension/1.0/schema.json
          type: Feature
          id: CS3-20160503_132131_05
          bbox:
          - -122.59750209
          - 37.48803556
          - -122.2880486
          - 37.613537207
          geometry:
            type: Polygon
            coordinates:
            - - - -122.308150179
                - 37.488035566
              - - -122.597502109
                - 37.538869539
              - - -122.576687533
                - 37.613537207
              - - -122.2880486
                - 37.562818007
              - - -122.308150179
                - 37.488035566
          properties:
            datetime: 2016-05-03T13:22:30.040Z
            title: A CS3 item
            license: PDDL-1.0
            providers:
            - name: CoolSat
              roles:
              - producer
              - licensor
              url: https://cool-sat.com/
            view:sun_azimuth: 168.7
            eo:cloud_cover: 0.12
            view:off_nadir: 1.4
            platform: coolsat2
            instruments:
            - cool_sensor_v1
            eo:bands: []
            view:sun_elevation: 33.4
            eo:gsd: 0.512
          collection: CS3
          links:
          - rel: self
            href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
          - rel: root
            href: http://cool-sat.com/collections
          - rel: parent
            href: http://cool-sat.com/collections/CS3
          - rel: collection
            href: http://cool-sat.com/collections/CS3
          assets:
            analytic:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
              title: 4-Band Analytic
            thumbnail:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
              title: Thumbnail
        - stac_version: 0.9.0
          stac_extensions:
          - eo
          - view
          - https://example.com/cs-extension/1.0/schema.json
          type: Feature
          id: CS3-20160503_132131_05
          bbox:
          - -122.59750209
          - 37.48803556
          - -122.2880486
          - 37.613537207
          geometry:
            type: Polygon
            coordinates:
            - - - -122.308150179
                - 37.488035566
              - - -122.597502109
                - 37.538869539
              - - -122.576687533
                - 37.613537207
              - - -122.2880486
                - 37.562818007
              - - -122.308150179
                - 37.488035566
          properties:
            datetime: 2016-05-03T13:22:30.040Z
            title: A CS3 item
            license: PDDL-1.0
            providers:
            - name: CoolSat
              roles:
              - producer
              - licensor
              url: https://cool-sat.com/
            view:sun_azimuth: 168.7
            eo:cloud_cover: 0.12
            view:off_nadir: 1.4
            platform: coolsat2
            instruments:
            - cool_sensor_v1
            eo:bands: []
            view:sun_elevation: 33.4
            eo:gsd: 0.512
          collection: CS3
          links:
          - rel: self
            href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
          - rel: root
            href: http://cool-sat.com/collections
          - rel: parent
            href: http://cool-sat.com/collections/CS3
          - rel: collection
            href: http://cool-sat.com/collections/CS3
          assets:
            analytic:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
              title: 4-Band Analytic
            thumbnail:
              href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
              title: Thumbnail
        context:
          limit: 5
          matched: 1
          returned: 1
        links:
        - rel: next
          href: http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk
        type: FeatureCollection
      properties:
        type:
          enum:
          - FeatureCollection
          type: string
        features:
          items:
            $ref: '#/components/schemas/item'
          type: array
        links:
          description: An array of links. Can be used for pagination, e.g. by providing
            a link with the `next` relation type.
          example:
          - rel: next
            href: http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk
          items:
            $ref: '#/components/schemas/link'
          type: array
        context:
          $ref: '#/components/schemas/itemCollection_context'
      required:
      - features
      - type
      type: object
    item:
      description: A GeoJSON Feature augmented with foreign members that contain values
        relevant to a STAC entity
      example:
        stac_version: 0.9.0
        stac_extensions:
        - eo
        - view
        - https://example.com/cs-extension/1.0/schema.json
        type: Feature
        id: CS3-20160503_132131_05
        bbox:
        - -122.59750209
        - 37.48803556
        - -122.2880486
        - 37.613537207
        geometry:
          type: Polygon
          coordinates:
          - - - -122.308150179
              - 37.488035566
            - - -122.597502109
              - 37.538869539
            - - -122.576687533
              - 37.613537207
            - - -122.2880486
              - 37.562818007
            - - -122.308150179
              - 37.488035566
        properties:
          datetime: 2016-05-03T13:22:30.040Z
          title: A CS3 item
          license: PDDL-1.0
          providers:
          - name: CoolSat
            roles:
            - producer
            - licensor
            url: https://cool-sat.com/
          view:sun_azimuth: 168.7
          eo:cloud_cover: 0.12
          view:off_nadir: 1.4
          platform: coolsat2
          instruments:
          - cool_sensor_v1
          eo:bands: []
          view:sun_elevation: 33.4
          eo:gsd: 0.512
        collection: CS3
        links:
        - rel: self
          href: http://cool-sat.com/collections/CS3/items/20160503_132130_04
        - rel: root
          href: http://cool-sat.com/collections
        - rel: parent
          href: http://cool-sat.com/collections/CS3
        - rel: collection
          href: http://cool-sat.com/collections/CS3
        assets:
          analytic:
            href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/analytic.tif
            title: 4-Band Analytic
          thumbnail:
            href: http://cool-sat.com/static-catalog/CS3/20160503_132130_04/thumbnail.png
            title: Thumbnail
      properties:
        stac_version:
          example: 0.9.0
          title: STAC version
          type: string
        stac_extensions:
          items:
            anyOf:
            - format: uri
              title: Reference to a JSON Schema
              type: string
            - title: Reference to a core extension
              type: string
          title: STAC extensions
          type: array
          uniqueItems: true
        id:
          description: Provider identifier, a unique ID, potentially a link to a file.
          example: path/to/example.tif
          type: string
        bbox:
          description: "Only features that have a geometry that intersects the bounding\
            \ box are\nselected. The bounding box is provided as four or six numbers,\n\
            depending on whether the coordinate reference system includes a\nvertical\
            \ axis (elevation or depth):\n\n* Lower left corner, coordinate axis 1\n\
            * Lower left corner, coordinate axis 2  \n* Lower left corner, coordinate\
            \ axis 3 (optional) \n* Upper right corner, coordinate axis 1 \n* Upper\
            \ right corner, coordinate axis 2 \n* Upper right corner, coordinate axis\
            \ 3 (optional)\n\nThe coordinate reference system of the values is WGS84\n\
            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless\n\
            a different coordinate reference system is specified in the parameter\n\
            `bbox-crs`.\n\nFor WGS84 longitude/latitude the values are in most cases\
            \ the sequence\nof minimum longitude, minimum latitude, maximum longitude\
            \ and maximum\nlatitude. However, in cases where the box spans the antimeridian\
            \ the\nfirst value (west-most box edge) is larger than the third value\n\
            (east-most box edge).\n\nIf a feature has multiple spatial geometry properties,\
            \ it is the\ndecision of the server whether only a single spatial geometry\
            \ property\nis used to determine the extent or all relevant geometries.\n\
            \nExample: The bounding box of the New Zealand Exclusive Economic Zone\
            \ in\nWGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would\
            \ be\nrepresented in JSON as `[160.6, -55.95, -170, -25.89]` and in a\
            \ query as\n`bbox=160.6,-55.95,-170,-25.89`."
          example:
          - -110
          - 39.5
          - -105
          - 40.5
          items:
            type: number
          maxItems: 6
          minItems: 4
          type: array
        geometry:
          $ref: '#/components/schemas/Geometry'
        type:
          $ref: '#/components/schemas/itemType'
        properties:
          $ref: '#/components/schemas/itemProperties'
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        assets:
          additionalProperties:
            properties:
              href:
                description: Link to the asset object
                example: http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
                format: url
                type: string
              title:
                description: Displayed title
                example: Thumbnail
                type: string
              description:
                description: |-
                  Multi-line description to explain the asset.

                  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
                  rich text representation.
                example: Small 256x256px PNG thumbnail for a preview.
                type: string
              type:
                description: Media type of the asset
                example: image/png
                type: string
              roles:
                description: Purposes of the asset
                example:
                - thumbnail
                items:
                  type: string
                type: array
            required:
            - href
            type: object
          type: object
      required:
      - assets
      - bbox
      - geometry
      - id
      - links
      - properties
      - stac_version
      - type
      type: object
    itemId:
      description: Provider identifier, a unique ID, potentially a link to a file.
      example: path/to/example.tif
      type: string
    itemType:
      description: The GeoJSON type
      enum:
      - Feature
      type: string
    itemAssets:
      additionalProperties:
        properties:
          href:
            description: Link to the asset object
            example: http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
            format: url
            type: string
          title:
            description: Displayed title
            example: Thumbnail
            type: string
          description:
            description: |-
              Multi-line description to explain the asset.

              [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
              rich text representation.
            example: Small 256x256px PNG thumbnail for a preview.
            type: string
          type:
            description: Media type of the asset
            example: image/png
            type: string
          roles:
            description: Purposes of the asset
            example:
            - thumbnail
            items:
              type: string
            type: array
        required:
        - href
        type: object
      type: object
    itemProperties:
      additionalProperties:
        description: Any additional properties added in via Item specification or
          extensions.
      description: provides the core metatdata fields plus extensions
      properties:
        datetime:
          description: |-
            Either a date-time or an interval, open or closed. Date and time
            expressions adhere to RFC 3339. Open intervals are expressed using
            double-dots.

            Examples:

            * A date-time: "2018-02-12T23:20:50Z"
            * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
            * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

            Only features that have a temporal property that intersects the value of
            `datetime` are selected.

            If a feature has multiple temporal properties, it is the decision of the
            server whether only a single temporal property is used to determine
            the extent or all relevant temporal properties.
          example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
          type: string
      required:
      - datetime
      type: object
    itemCollectionLinks:
      description: An array of links. Can be used for pagination, e.g. by providing
        a link with the `next` relation type.
      example:
      - rel: next
        href: http://api.cool-sat.com/search?next=ANsXtp9mrqN0yrKWhf-y2PUpHRLQb1GT-mtxNcXou8TwkXhi1Jbk
      items:
        $ref: '#/components/schemas/link'
      type: array
    queryFilter:
      description: Allows users to query properties for specific values
      properties:
        query:
          additionalProperties:
            $ref: '#/components/schemas/queryProp'
          description: Define which properties to query and the operatations to apply
          example:
            eo:cloud_cover:
              gt: 8
              lt: 50
            platform:
              eq: landsat-8
            datetime:
              gte: 2018-02-12T00:00:00Z
              lte: 2018-03-18T12:31:12Z
            pl:item_type:
              startsWith: PSScene
            product:
              in:
              - foo
              - bar
              - baz
            eo:gsd:
              in:
              - 10
              - 20
          type: object
      type: object
    query:
      additionalProperties:
        $ref: '#/components/schemas/queryProp'
      description: Define which properties to query and the operatations to apply
      example:
        eo:cloud_cover:
          gt: 8
          lt: 50
        platform:
          eq: landsat-8
        datetime:
          gte: 2018-02-12T00:00:00Z
          lte: 2018-03-18T12:31:12Z
        pl:item_type:
          startsWith: PSScene
        product:
          in:
          - foo
          - bar
          - baz
        eo:gsd:
          in:
          - 10
          - 20
      type: object
    queryProp:
      anyOf:
      - description: if the object doesn't contain any of the operators, it is equivalent
          to using the equals operator
      - $ref: '#/components/schemas/queryProp_anyOf'
      description: Apply query operations to a specific property
    sortFilter:
      description: Sort the results
      properties:
        sortby:
          description: |
            An array of objects containing a property name and sort direction.
          example:
          - field: properties.eo:cloud_cover
            direction: asc
          - field: id
            direction: desc
          items:
            properties:
              field:
                type: string
              direction:
                default: asc
                enum:
                - asc
                - desc
                type: string
            required:
            - direction
            - field
            type: object
          minItems: 1
          type: array
      type: object
    sortby:
      description: |
        An array of objects containing a property name and sort direction.
      example:
      - field: properties.eo:cloud_cover
        direction: asc
      - field: id
        direction: desc
      items:
        properties:
          field:
            type: string
          direction:
            default: asc
            enum:
            - asc
            - desc
            type: string
        required:
        - direction
        - field
        type: object
      minItems: 1
      type: array
    fieldsFilter:
      description: Determines the shape of the features in the response
      properties:
        fields:
          $ref: '#/components/schemas/fields'
      type: object
    fields:
      description: |
        The include and exclude members specify an array of
        property names that are either included or excluded
        from the result, respectively. If both include and
        exclude are specified, include takes precedence.
        Values should include the full JSON path of the property.
      example:
        include:
        - id
        - properties.eo:cloud_cover
        exclude:
        - geometry
        - properties.datetime
      properties:
        include:
          items:
            type: string
          type: array
        exclude:
          items:
            type: string
          type: array
      type: object
    partialItem:
      example:
        assets:
          analytic:
            title: 1-Band Analytic
            href: http://cool-sat.com/catalog/collections/cs/items/CS3-201605XX_132130_04/analytic-1.tif
      properties:
        stac_version:
          example: 0.9.0
          title: STAC version
          type: string
        stac_extensions:
          items:
            anyOf:
            - format: uri
              title: Reference to a JSON Schema
              type: string
            - title: Reference to a core extension
              type: string
          title: STAC extensions
          type: array
          uniqueItems: true
        id:
          description: Provider identifier, a unique ID, potentially a link to a file.
          example: path/to/example.tif
          type: string
        bbox:
          description: "Only features that have a geometry that intersects the bounding\
            \ box are\nselected. The bounding box is provided as four or six numbers,\n\
            depending on whether the coordinate reference system includes a\nvertical\
            \ axis (elevation or depth):\n\n* Lower left corner, coordinate axis 1\n\
            * Lower left corner, coordinate axis 2  \n* Lower left corner, coordinate\
            \ axis 3 (optional) \n* Upper right corner, coordinate axis 1 \n* Upper\
            \ right corner, coordinate axis 2 \n* Upper right corner, coordinate axis\
            \ 3 (optional)\n\nThe coordinate reference system of the values is WGS84\n\
            longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless\n\
            a different coordinate reference system is specified in the parameter\n\
            `bbox-crs`.\n\nFor WGS84 longitude/latitude the values are in most cases\
            \ the sequence\nof minimum longitude, minimum latitude, maximum longitude\
            \ and maximum\nlatitude. However, in cases where the box spans the antimeridian\
            \ the\nfirst value (west-most box edge) is larger than the third value\n\
            (east-most box edge).\n\nIf a feature has multiple spatial geometry properties,\
            \ it is the\ndecision of the server whether only a single spatial geometry\
            \ property\nis used to determine the extent or all relevant geometries.\n\
            \nExample: The bounding box of the New Zealand Exclusive Economic Zone\
            \ in\nWGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would\
            \ be\nrepresented in JSON as `[160.6, -55.95, -170, -25.89]` and in a\
            \ query as\n`bbox=160.6,-55.95,-170,-25.89`."
          example:
          - -110
          - 39.5
          - -105
          - 40.5
          items:
            type: number
          maxItems: 6
          minItems: 4
          type: array
        geometry:
          $ref: '#/components/schemas/Geometry'
        type:
          $ref: '#/components/schemas/itemType'
        properties:
          $ref: '#/components/schemas/partialItemProperties'
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
        assets:
          additionalProperties:
            properties:
              href:
                description: Link to the asset object
                example: http://cool-sat.com/catalog/collections/cs/items/CS3-20160503_132130_04/thumb.png
                format: url
                type: string
              title:
                description: Displayed title
                example: Thumbnail
                type: string
              description:
                description: |-
                  Multi-line description to explain the asset.

                  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
                  rich text representation.
                example: Small 256x256px PNG thumbnail for a preview.
                type: string
              type:
                description: Media type of the asset
                example: image/png
                type: string
              roles:
                description: Purposes of the asset
                example:
                - thumbnail
                items:
                  type: string
                type: array
            required:
            - href
            type: object
          type: object
      type: object
    partialItemProperties:
      additionalProperties: true
      description: allows for partial collections of metadata fields
      properties:
        datetime:
          description: |-
            Either a date-time or an interval, open or closed. Date and time
            expressions adhere to RFC 3339. Open intervals are expressed using
            double-dots.

            Examples:

            * A date-time: "2018-02-12T23:20:50Z"
            * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
            * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"

            Only features that have a temporal property that intersects the value of
            `datetime` are selected.

            If a feature has multiple temporal properties, it is the decision of the
            server whether only a single temporal property is used to determine
            the extent or all relevant temporal properties.
          example: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
          type: string
      type: object
    catalogDefinition:
      example:
        stac_version: 0.9.0
        description: description
        links:
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        - headers:
            Accept: application/json
          hreflang: en
          method: GET
          merge: false
          rel: child
          length: 0
          href: http://www.geoserver.example/stac/naip/child/catalog.json
          type: application/geo+json
          title: NAIP Child Catalog
          body: '{}'
        id: id
        title: title
        stac_extensions:
        - ""
        - ""
      properties:
        stac_version:
          example: 0.9.0
          title: STAC version
          type: string
        stac_extensions:
          items:
            anyOf:
            - format: uri
              title: Reference to a JSON Schema
              type: string
            - title: Reference to a core extension
              type: string
          title: STAC extensions
          type: array
          uniqueItems: true
        id:
          description: identifier of the catalog used, for example, in URIs
          type: string
        title:
          description: human readable title of the catalog
          type: string
        description:
          description: |-
            Detailed multi-line description to fully explain the catalog or
            collection.

            [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
            text representation.
          type: string
        links:
          items:
            $ref: '#/components/schemas/link'
          type: array
      required:
      - description
      - id
      - links
      - stac_version
      type: object
    Geometry:
      oneOf:
      - $ref: '#/components/schemas/GeoJSON_Point'
      - $ref: '#/components/schemas/GeoJSON_LineString'
      - $ref: '#/components/schemas/GeoJSON_Polygon'
      - $ref: '#/components/schemas/GeoJSON_MultiPoint'
      - $ref: '#/components/schemas/GeoJSON_MultiLineString'
      - $ref: '#/components/schemas/GeoJSON_MultiPolygon'
      title: GeoJSON Geometry
    extent_spatial:
      description: The spatial extent of the features in the collection.
      properties:
        bbox:
          description: |-
            One or more bounding boxes that describe the spatial extent of the dataset.
            In the Core only a single bounding box is supported. Extensions may support
            additional areas. If multiple areas are provided, the union of the bounding
            boxes describes the spatial extent.
          items:
            description: |-
              Each bounding box is provided as four or six numbers, depending on
              whether the coordinate reference system includes a vertical axis
              (height or depth):

              * Lower left corner, coordinate axis 1
              * Lower left corner, coordinate axis 2
              * Minimum value, coordinate axis 3 (optional)
              * Upper right corner, coordinate axis 1
              * Upper right corner, coordinate axis 2
              * Maximum value, coordinate axis 3 (optional)

              The coordinate reference system of the values is WGS 84 longitude/latitude
              (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate
              reference system is specified in `crs`.

              For WGS 84 longitude/latitude the values are in most cases the sequence of
              minimum longitude, minimum latitude, maximum longitude and maximum latitude.
              However, in cases where the box spans the antimeridian the first value
              (west-most box edge) is larger than the third value (east-most box edge).

              If the vertical axis is included, the third and the sixth number are
              the bottom and the top of the 3-dimensional bounding box.

              If a feature has multiple spatial geometry properties, it is the decision of the
              server whether only a single spatial geometry property is used to determine
              the extent or all relevant geometries.
            example:
            - -180
            - -90
            - 180
            - 90
            items:
              type: number
            maxItems: 6
            minItems: 4
            type: array
          minItems: 1
          type: array
        crs:
          default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
          description: |-
            Coordinate reference system of the coordinates in the spatial extent
            (property `bbox`). The default reference system is WGS 84 longitude/latitude.
            In the Core this is the only supported coordinate reference system.
            Extensions may support additional coordinate reference systems and add
            additional enum values.
          enum:
          - http://www.opengis.net/def/crs/OGC/1.3/CRS84
          type: string
      required:
      - bbox
    extent_temporal:
      description: The temporal extent of the features in the collection.
      properties:
        interval:
          description: |-
            One or more time intervals that describe the temporal extent of the dataset.
            The value `null` is supported and indicates an open time intervall.
            In the Core only a single time interval is supported. Extensions may support
            multiple intervals. If multiple intervals are provided, the union of the
            intervals describes the temporal extent.
          items:
            description: |-
              Begin and end times of the time interval. The timestamps
              are in the coordinate reference system specified in `trs`. By default
              this is the Gregorian calendar.
            example:
            - 2011-11-11T12:22:11Z
            - null
            items:
              format: date-time
              nullable: true
              type: string
            maxItems: 2
            minItems: 2
            type: array
          minItems: 1
          type: array
        trs:
          default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
          description: |-
            Coordinate reference system of the coordinates in the temporal extent
            (property `interval`). The default reference system is the Gregorian calendar.
            In the Core this is the only supported temporal reference system.
            Extensions may support additional temporal reference systems and add
            additional enum values.
          enum:
          - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
          type: string
      required:
      - interval
    itemCollection_context:
      example:
        limit: 5
        matched: 1
        returned: 1
      properties:
        limit:
          example: 5
          minimum: 0
          nullable: true
          type: integer
        matched:
          example: 1
          minimum: 0
          type: integer
        returned:
          example: 1
          minimum: 0
          type: integer
      required:
      - next
      - returned
    queryProp_anyOf:
      description: Match using an operator
      properties:
        eq:
          description: Find items with a property that is equal to the specified value.
            For strings, a case-insensitive comparison must be performed.
          nullable: true
          oneOf:
          - type: string
          - type: number
          - type: boolean
        neq:
          description: Find items that *don't* contain the specified value. For strings,
            a case-insensitive comparison must be performed.
          nullable: true
          oneOf:
          - type: string
          - type: number
          - type: boolean
        gt:
          description: Find items with a property value greater than the specified
            value.
          oneOf:
          - format: date-time
            type: string
          - type: number
        lt:
          description: Find items with a property value less than the specified value.
          oneOf:
          - format: date-time
            type: string
          - type: number
        gte:
          description: Find items with a property value greater than or equal the
            specified value.
          oneOf:
          - format: date-time
            type: string
          - type: number
        lte:
          description: Find items with a property value less than or equal the specified
            value.
          oneOf:
          - format: date-time
            type: string
          - type: number
        startsWith:
          description: Find items with a property that begins with the specified string.
            A case-insensitive comparison must be performed.
          type: string
        endsWith:
          description: Find items with a property that ends with the specified string.
            A case-insensitive comparison must be performed.
          type: string
        contains:
          description: Find items with a property that contains the specified literal
            string, e.g., matches ".*<STRING>.*". A case-insensitive comparison must
            be performed.
          type: string
        in:
          description: Find items with a property that equals at least one entry in
            the specified array. A case-insensitive comparison must be performed.
          items:
            oneOf:
            - type: string
            - type: number
          type: array
    GeoJSON_Point:
      properties:
        type:
          enum:
          - Point
          type: string
        coordinates:
          items:
            type: number
          minItems: 2
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
    GeoJSON_LineString:
      properties:
        type:
          enum:
          - LineString
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          minItems: 2
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
    GeoJSON_Polygon:
      properties:
        type:
          enum:
          - Polygon
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 4
            type: array
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
    GeoJSON_MultiPoint:
      properties:
        type:
          enum:
          - MultiPoint
          type: string
        coordinates:
          items:
            items:
              type: number
            minItems: 2
            type: array
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
    GeoJSON_MultiLineString:
      properties:
        type:
          enum:
          - MultiLineString
          type: string
        coordinates:
          items:
            items:
              items:
                type: number
              minItems: 2
              type: array
            minItems: 2
            type: array
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
    GeoJSON_MultiPolygon:
      properties:
        type:
          enum:
          - MultiPolygon
          type: string
        coordinates:
          items:
            items:
              items:
                items:
                  type: number
                minItems: 2
                type: array
              minItems: 4
              type: array
            type: array
          type: array
        bbox:
          items:
            type: number
          minItems: 4
          type: array
      required:
      - coordinates
      - type
