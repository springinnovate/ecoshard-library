# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.any_of_ur_istring import AnyOfURIstring
from openapi_server.models.extent import Extent
from openapi_server.models.link import Link
from openapi_server.models.one_ofarrayobject import OneOfarrayobject
from openapi_server import util

from openapi_server.models.any_of_ur_istring import AnyOfURIstring  # noqa: E501
from openapi_server.models.extent import Extent  # noqa: E501
from openapi_server.models.link import Link  # noqa: E501
from openapi_server.models.one_ofarrayobject import OneOfarrayobject  # noqa: E501

class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, description=None, links=None, extent=None, item_type='feature', crs=None, stac_version=None, stac_extensions=None, keywords=None, license=None, providers=None, summaries=None):  # noqa: E501
        """Collection - a model defined in OpenAPI

        :param id: The id of this Collection.  # noqa: E501
        :type id: str
        :param title: The title of this Collection.  # noqa: E501
        :type title: str
        :param description: The description of this Collection.  # noqa: E501
        :type description: str
        :param links: The links of this Collection.  # noqa: E501
        :type links: List[Link]
        :param extent: The extent of this Collection.  # noqa: E501
        :type extent: Extent
        :param item_type: The item_type of this Collection.  # noqa: E501
        :type item_type: str
        :param crs: The crs of this Collection.  # noqa: E501
        :type crs: List[str]
        :param stac_version: The stac_version of this Collection.  # noqa: E501
        :type stac_version: str
        :param stac_extensions: The stac_extensions of this Collection.  # noqa: E501
        :type stac_extensions: List[AnyOfURIstring]
        :param keywords: The keywords of this Collection.  # noqa: E501
        :type keywords: List[str]
        :param license: The license of this Collection.  # noqa: E501
        :type license: str
        :param providers: The providers of this Collection.  # noqa: E501
        :type providers: List[object]
        :param summaries: The summaries of this Collection.  # noqa: E501
        :type summaries: Dict[str, OneOfarrayobject]
        """
        self.openapi_types = {
            'id': str,
            'title': str,
            'description': str,
            'links': List[Link],
            'extent': Extent,
            'item_type': str,
            'crs': List[str],
            'stac_version': str,
            'stac_extensions': List[AnyOfURIstring],
            'keywords': List[str],
            'license': str,
            'providers': List[object],
            'summaries': Dict[str, OneOfarrayobject]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'links': 'links',
            'extent': 'extent',
            'item_type': 'itemType',
            'crs': 'crs',
            'stac_version': 'stac_version',
            'stac_extensions': 'stac_extensions',
            'keywords': 'keywords',
            'license': 'license',
            'providers': 'providers',
            'summaries': 'summaries'
        }

        self._id = id
        self._title = title
        self._description = description
        self._links = links
        self._extent = extent
        self._item_type = item_type
        self._crs = crs
        self._stac_version = stac_version
        self._stac_extensions = stac_extensions
        self._keywords = keywords
        self._license = license
        self._providers = providers
        self._summaries = summaries

    @classmethod
    def from_dict(cls, dikt) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collection of this Collection.  # noqa: E501
        :rtype: Collection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Collection.

        identifier of the collection used, for example, in URIs  # noqa: E501

        :return: The id of this Collection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.

        identifier of the collection used, for example, in URIs  # noqa: E501

        :param id: The id of this Collection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this Collection.

        human readable title of the collection  # noqa: E501

        :return: The title of this Collection.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Collection.

        human readable title of the collection  # noqa: E501

        :param title: The title of this Collection.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Collection.

        Detailed multi-line description to fully explain the catalog or collection.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.  # noqa: E501

        :return: The description of this Collection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Collection.

        Detailed multi-line description to fully explain the catalog or collection.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.  # noqa: E501

        :param description: The description of this Collection.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def links(self):
        """Gets the links of this Collection.


        :return: The links of this Collection.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Collection.


        :param links: The links of this Collection.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def extent(self):
        """Gets the extent of this Collection.


        :return: The extent of this Collection.
        :rtype: Extent
        """
        return self._extent

    @extent.setter
    def extent(self, extent):
        """Sets the extent of this Collection.


        :param extent: The extent of this Collection.
        :type extent: Extent
        """
        if extent is None:
            raise ValueError("Invalid value for `extent`, must not be `None`")  # noqa: E501

        self._extent = extent

    @property
    def item_type(self):
        """Gets the item_type of this Collection.

        indicator about the type of the items in the collection (the default value is 'feature').  # noqa: E501

        :return: The item_type of this Collection.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this Collection.

        indicator about the type of the items in the collection (the default value is 'feature').  # noqa: E501

        :param item_type: The item_type of this Collection.
        :type item_type: str
        """

        self._item_type = item_type

    @property
    def crs(self):
        """Gets the crs of this Collection.

        the list of coordinate reference systems supported by the service  # noqa: E501

        :return: The crs of this Collection.
        :rtype: List[str]
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this Collection.

        the list of coordinate reference systems supported by the service  # noqa: E501

        :param crs: The crs of this Collection.
        :type crs: List[str]
        """

        self._crs = crs

    @property
    def stac_version(self):
        """Gets the stac_version of this Collection.


        :return: The stac_version of this Collection.
        :rtype: str
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this Collection.


        :param stac_version: The stac_version of this Collection.
        :type stac_version: str
        """
        if stac_version is None:
            raise ValueError("Invalid value for `stac_version`, must not be `None`")  # noqa: E501

        self._stac_version = stac_version

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this Collection.


        :return: The stac_extensions of this Collection.
        :rtype: List[AnyOfURIstring]
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this Collection.


        :param stac_extensions: The stac_extensions of this Collection.
        :type stac_extensions: List[AnyOfURIstring]
        """

        self._stac_extensions = stac_extensions

    @property
    def keywords(self):
        """Gets the keywords of this Collection.

        List of keywords describing the collection.  # noqa: E501

        :return: The keywords of this Collection.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Collection.

        List of keywords describing the collection.  # noqa: E501

        :param keywords: The keywords of this Collection.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def license(self):
        """Gets the license of this Collection.

        License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/). Alternatively, use `proprietary` if the license is not on the SPDX license list or `various` if multiple licenses apply. In these two cases links to the license texts SHOULD be added, see the `license` link relation type.  Non-SPDX licenses SHOULD add a link to the license text with the `license` relation in the links section. The license text MUST NOT be provided as a value of this field. If there is no public license URL available, it is RECOMMENDED to host the license text and link to it.  # noqa: E501

        :return: The license of this Collection.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Collection.

        License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/). Alternatively, use `proprietary` if the license is not on the SPDX license list or `various` if multiple licenses apply. In these two cases links to the license texts SHOULD be added, see the `license` link relation type.  Non-SPDX licenses SHOULD add a link to the license text with the `license` relation in the links section. The license text MUST NOT be provided as a value of this field. If there is no public license URL available, it is RECOMMENDED to host the license text and link to it.  # noqa: E501

        :param license: The license of this Collection.
        :type license: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")  # noqa: E501

        self._license = license

    @property
    def providers(self):
        """Gets the providers of this Collection.

        A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.  # noqa: E501

        :return: The providers of this Collection.
        :rtype: List[object]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this Collection.

        A list of providers, which may include all organizations capturing or processing the data or the hosting provider. Providers should be listed in chronological order with the most recent provider being the last element of the list.  # noqa: E501

        :param providers: The providers of this Collection.
        :type providers: List[object]
        """

        self._providers = providers

    @property
    def summaries(self):
        """Gets the summaries of this Collection.

        Summaries are either a unique set of all available values *or* statistics. Statistics by default only specify the range (minimum and maximum values), but can optionally be accompanied by additional statistical values. The range can specify the potential range of values, but it is recommended to be as precise as possible. The set of values must contain at least one element and it is strongly recommended to list all values. It is recommended to list as many properties as reasonable so that consumers get a full overview of the Collection. Properties that are covered by the Collection specification (e.g. `providers` and `license`) may not be repeated in the summaries.  # noqa: E501

        :return: The summaries of this Collection.
        :rtype: Dict[str, OneOfarrayobject]
        """
        return self._summaries

    @summaries.setter
    def summaries(self, summaries):
        """Sets the summaries of this Collection.

        Summaries are either a unique set of all available values *or* statistics. Statistics by default only specify the range (minimum and maximum values), but can optionally be accompanied by additional statistical values. The range can specify the potential range of values, but it is recommended to be as precise as possible. The set of values must contain at least one element and it is strongly recommended to list all values. It is recommended to list as many properties as reasonable so that consumers get a full overview of the Collection. Properties that are covered by the Collection specification (e.g. `providers` and `license`) may not be repeated in the summaries.  # noqa: E501

        :param summaries: The summaries of this Collection.
        :type summaries: Dict[str, OneOfarrayobject]
        """

        self._summaries = summaries
