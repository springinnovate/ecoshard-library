# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExtentSpatial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox=None, crs='http://www.opengis.net/def/crs/OGC/1.3/CRS84'):  # noqa: E501
        """ExtentSpatial - a model defined in OpenAPI

        :param bbox: The bbox of this ExtentSpatial.  # noqa: E501
        :type bbox: List[List[float]]
        :param crs: The crs of this ExtentSpatial.  # noqa: E501
        :type crs: str
        """
        self.openapi_types = {
            'bbox': List[List[float]],
            'crs': str
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'crs': 'crs'
        }

        self._bbox = bbox
        self._crs = crs

    @classmethod
    def from_dict(cls, dikt) -> 'ExtentSpatial':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The extent_spatial of this ExtentSpatial.  # noqa: E501
        :rtype: ExtentSpatial
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this ExtentSpatial.

        One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent.  # noqa: E501

        :return: The bbox of this ExtentSpatial.
        :rtype: List[List[float]]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this ExtentSpatial.

        One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported. Extensions may support additional areas. If multiple areas are provided, the union of the bounding boxes describes the spatial extent.  # noqa: E501

        :param bbox: The bbox of this ExtentSpatial.
        :type bbox: List[List[float]]
        """
        if bbox is None:
            raise ValueError("Invalid value for `bbox`, must not be `None`")  # noqa: E501

        self._bbox = bbox

    @property
    def crs(self):
        """Gets the crs of this ExtentSpatial.

        Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values.  # noqa: E501

        :return: The crs of this ExtentSpatial.
        :rtype: str
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this ExtentSpatial.

        Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core this is the only supported coordinate reference system. Extensions may support additional coordinate reference systems and add additional enum values.  # noqa: E501

        :param crs: The crs of this ExtentSpatial.
        :type crs: str
        """
        allowed_values = ["http://www.opengis.net/def/crs/OGC/1.3/CRS84"]  # noqa: E501
        if crs not in allowed_values:
            raise ValueError(
                "Invalid value for `crs` ({0}), must be one of {1}"
                .format(crs, allowed_values)
            )

        self._crs = crs
