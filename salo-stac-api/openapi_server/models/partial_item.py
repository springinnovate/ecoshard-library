# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.any_of_ur_istring import AnyOfURIstring
from openapi_server.models.geometry import Geometry
from openapi_server.models.item_type import ItemType
from openapi_server.models.link import Link
from openapi_server.models.partial_item_properties import PartialItemProperties
from openapi_server import util

from openapi_server.models.any_of_ur_istring import AnyOfURIstring  # noqa: E501
from openapi_server.models.geometry import Geometry  # noqa: E501
from openapi_server.models.item_type import ItemType  # noqa: E501
from openapi_server.models.link import Link  # noqa: E501
from openapi_server.models.partial_item_properties import PartialItemProperties  # noqa: E501

class PartialItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stac_version=None, stac_extensions=None, id=None, bbox=None, geometry=None, type=None, properties=None, links=None, assets=None):  # noqa: E501
        """PartialItem - a model defined in OpenAPI

        :param stac_version: The stac_version of this PartialItem.  # noqa: E501
        :type stac_version: str
        :param stac_extensions: The stac_extensions of this PartialItem.  # noqa: E501
        :type stac_extensions: List[AnyOfURIstring]
        :param id: The id of this PartialItem.  # noqa: E501
        :type id: str
        :param bbox: The bbox of this PartialItem.  # noqa: E501
        :type bbox: List[float]
        :param geometry: The geometry of this PartialItem.  # noqa: E501
        :type geometry: Geometry
        :param type: The type of this PartialItem.  # noqa: E501
        :type type: ItemType
        :param properties: The properties of this PartialItem.  # noqa: E501
        :type properties: PartialItemProperties
        :param links: The links of this PartialItem.  # noqa: E501
        :type links: List[Link]
        :param assets: The assets of this PartialItem.  # noqa: E501
        :type assets: Dict[str, object]
        """
        self.openapi_types = {
            'stac_version': str,
            'stac_extensions': List[AnyOfURIstring],
            'id': str,
            'bbox': List[float],
            'geometry': Geometry,
            'type': ItemType,
            'properties': PartialItemProperties,
            'links': List[Link],
            'assets': Dict[str, object]
        }

        self.attribute_map = {
            'stac_version': 'stac_version',
            'stac_extensions': 'stac_extensions',
            'id': 'id',
            'bbox': 'bbox',
            'geometry': 'geometry',
            'type': 'type',
            'properties': 'properties',
            'links': 'links',
            'assets': 'assets'
        }

        self._stac_version = stac_version
        self._stac_extensions = stac_extensions
        self._id = id
        self._bbox = bbox
        self._geometry = geometry
        self._type = type
        self._properties = properties
        self._links = links
        self._assets = assets

    @classmethod
    def from_dict(cls, dikt) -> 'PartialItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The partialItem of this PartialItem.  # noqa: E501
        :rtype: PartialItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stac_version(self):
        """Gets the stac_version of this PartialItem.


        :return: The stac_version of this PartialItem.
        :rtype: str
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this PartialItem.


        :param stac_version: The stac_version of this PartialItem.
        :type stac_version: str
        """

        self._stac_version = stac_version

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this PartialItem.


        :return: The stac_extensions of this PartialItem.
        :rtype: List[AnyOfURIstring]
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this PartialItem.


        :param stac_extensions: The stac_extensions of this PartialItem.
        :type stac_extensions: List[AnyOfURIstring]
        """

        self._stac_extensions = stac_extensions

    @property
    def id(self):
        """Gets the id of this PartialItem.

        Provider identifier, a unique ID, potentially a link to a file.  # noqa: E501

        :return: The id of this PartialItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PartialItem.

        Provider identifier, a unique ID, potentially a link to a file.  # noqa: E501

        :param id: The id of this PartialItem.
        :type id: str
        """

        self._id = id

    @property
    def bbox(self):
        """Gets the bbox of this PartialItem.

        Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2   * Lower left corner, coordinate axis 3 (optional)  * Upper right corner, coordinate axis 1  * Upper right corner, coordinate axis 2  * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.  Example: The bounding box of the New Zealand Exclusive Economic Zone in WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as `bbox=160.6,-55.95,-170,-25.89`.  # noqa: E501

        :return: The bbox of this PartialItem.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this PartialItem.

        Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2   * Lower left corner, coordinate axis 3 (optional)  * Upper right corner, coordinate axis 1  * Upper right corner, coordinate axis 2  * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.  Example: The bounding box of the New Zealand Exclusive Economic Zone in WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as `bbox=160.6,-55.95,-170,-25.89`.  # noqa: E501

        :param bbox: The bbox of this PartialItem.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def geometry(self):
        """Gets the geometry of this PartialItem.


        :return: The geometry of this PartialItem.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this PartialItem.


        :param geometry: The geometry of this PartialItem.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def type(self):
        """Gets the type of this PartialItem.


        :return: The type of this PartialItem.
        :rtype: ItemType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartialItem.


        :param type: The type of this PartialItem.
        :type type: ItemType
        """

        self._type = type

    @property
    def properties(self):
        """Gets the properties of this PartialItem.


        :return: The properties of this PartialItem.
        :rtype: PartialItemProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PartialItem.


        :param properties: The properties of this PartialItem.
        :type properties: PartialItemProperties
        """

        self._properties = properties

    @property
    def links(self):
        """Gets the links of this PartialItem.


        :return: The links of this PartialItem.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PartialItem.


        :param links: The links of this PartialItem.
        :type links: List[Link]
        """

        self._links = links

    @property
    def assets(self):
        """Gets the assets of this PartialItem.


        :return: The assets of this PartialItem.
        :rtype: Dict[str, object]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this PartialItem.


        :param assets: The assets of this PartialItem.
        :type assets: Dict[str, object]
        """

        self._assets = assets
