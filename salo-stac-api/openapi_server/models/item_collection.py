# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.item import Item
from openapi_server.models.item_collection_context import ItemCollectionContext
from openapi_server.models.link import Link
from openapi_server import util

from openapi_server.models.item import Item  # noqa: E501
from openapi_server.models.item_collection_context import ItemCollectionContext  # noqa: E501
from openapi_server.models.link import Link  # noqa: E501

class ItemCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, features=None, links=None, context=None):  # noqa: E501
        """ItemCollection - a model defined in OpenAPI

        :param type: The type of this ItemCollection.  # noqa: E501
        :type type: str
        :param features: The features of this ItemCollection.  # noqa: E501
        :type features: List[Item]
        :param links: The links of this ItemCollection.  # noqa: E501
        :type links: List[Link]
        :param context: The context of this ItemCollection.  # noqa: E501
        :type context: ItemCollectionContext
        """
        self.openapi_types = {
            'type': str,
            'features': List[Item],
            'links': List[Link],
            'context': ItemCollectionContext
        }

        self.attribute_map = {
            'type': 'type',
            'features': 'features',
            'links': 'links',
            'context': 'context'
        }

        self._type = type
        self._features = features
        self._links = links
        self._context = context

    @classmethod
    def from_dict(cls, dikt) -> 'ItemCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The itemCollection of this ItemCollection.  # noqa: E501
        :rtype: ItemCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ItemCollection.


        :return: The type of this ItemCollection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemCollection.


        :param type: The type of this ItemCollection.
        :type type: str
        """
        allowed_values = ["FeatureCollection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def features(self):
        """Gets the features of this ItemCollection.


        :return: The features of this ItemCollection.
        :rtype: List[Item]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ItemCollection.


        :param features: The features of this ItemCollection.
        :type features: List[Item]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def links(self):
        """Gets the links of this ItemCollection.

        An array of links. Can be used for pagination, e.g. by providing a link with the `next` relation type.  # noqa: E501

        :return: The links of this ItemCollection.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ItemCollection.

        An array of links. Can be used for pagination, e.g. by providing a link with the `next` relation type.  # noqa: E501

        :param links: The links of this ItemCollection.
        :type links: List[Link]
        """

        self._links = links

    @property
    def context(self):
        """Gets the context of this ItemCollection.


        :return: The context of this ItemCollection.
        :rtype: ItemCollectionContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ItemCollection.


        :param context: The context of this ItemCollection.
        :type context: ItemCollectionContext
        """

        self._context = context
