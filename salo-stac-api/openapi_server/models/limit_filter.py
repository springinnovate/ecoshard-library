# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LimitFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit=10):  # noqa: E501
        """LimitFilter - a model defined in OpenAPI

        :param limit: The limit of this LimitFilter.  # noqa: E501
        :type limit: int
        """
        self.openapi_types = {
            'limit': int
        }

        self.attribute_map = {
            'limit': 'limit'
        }

        self._limit = limit

    @classmethod
    def from_dict(cls, dikt) -> 'LimitFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The limitFilter of this LimitFilter.  # noqa: E501
        :rtype: LimitFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this LimitFilter.

        The maximum number of results to return (page size). Defaults to 10  # noqa: E501

        :return: The limit of this LimitFilter.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this LimitFilter.

        The maximum number of results to return (page size). Defaults to 10  # noqa: E501

        :param limit: The limit of this LimitFilter.
        :type limit: int
        """
        if limit is not None and limit > 10000:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `10000`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit
