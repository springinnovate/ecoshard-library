# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.one_of_date_timenumber import OneOfDateTimenumber
from openapi_server.models.one_ofstringnumber import OneOfstringnumber
from openapi_server.models.one_ofstringnumberboolean import OneOfstringnumberboolean
from openapi_server.models.query_prop_any_of import QueryPropAnyOf
from openapi_server import util

from openapi_server.models.one_of_date_timenumber import OneOfDateTimenumber  # noqa: E501
from openapi_server.models.one_ofstringnumber import OneOfstringnumber  # noqa: E501
from openapi_server.models.one_ofstringnumberboolean import OneOfstringnumberboolean  # noqa: E501
from openapi_server.models.query_prop_any_of import QueryPropAnyOf  # noqa: E501

class QueryProp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eq=None, neq=None, gt=None, lt=None, gte=None, lte=None, starts_with=None, ends_with=None, contains=None, _in=None):  # noqa: E501
        """QueryProp - a model defined in OpenAPI

        :param eq: The eq of this QueryProp.  # noqa: E501
        :type eq: OneOfstringnumberboolean
        :param neq: The neq of this QueryProp.  # noqa: E501
        :type neq: OneOfstringnumberboolean
        :param gt: The gt of this QueryProp.  # noqa: E501
        :type gt: OneOfDateTimenumber
        :param lt: The lt of this QueryProp.  # noqa: E501
        :type lt: OneOfDateTimenumber
        :param gte: The gte of this QueryProp.  # noqa: E501
        :type gte: OneOfDateTimenumber
        :param lte: The lte of this QueryProp.  # noqa: E501
        :type lte: OneOfDateTimenumber
        :param starts_with: The starts_with of this QueryProp.  # noqa: E501
        :type starts_with: str
        :param ends_with: The ends_with of this QueryProp.  # noqa: E501
        :type ends_with: str
        :param contains: The contains of this QueryProp.  # noqa: E501
        :type contains: str
        :param _in: The _in of this QueryProp.  # noqa: E501
        :type _in: List[OneOfstringnumber]
        """
        self.openapi_types = {
            'eq': OneOfstringnumberboolean,
            'neq': OneOfstringnumberboolean,
            'gt': OneOfDateTimenumber,
            'lt': OneOfDateTimenumber,
            'gte': OneOfDateTimenumber,
            'lte': OneOfDateTimenumber,
            'starts_with': str,
            'ends_with': str,
            'contains': str,
            '_in': List[OneOfstringnumber]
        }

        self.attribute_map = {
            'eq': 'eq',
            'neq': 'neq',
            'gt': 'gt',
            'lt': 'lt',
            'gte': 'gte',
            'lte': 'lte',
            'starts_with': 'startsWith',
            'ends_with': 'endsWith',
            'contains': 'contains',
            '_in': 'in'
        }

        self._eq = eq
        self._neq = neq
        self._gt = gt
        self._lt = lt
        self._gte = gte
        self._lte = lte
        self._starts_with = starts_with
        self._ends_with = ends_with
        self._contains = contains
        self.__in = _in

    @classmethod
    def from_dict(cls, dikt) -> 'QueryProp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The queryProp of this QueryProp.  # noqa: E501
        :rtype: QueryProp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eq(self):
        """Gets the eq of this QueryProp.

        Find items with a property that is equal to the specified value. For strings, a case-insensitive comparison must be performed.  # noqa: E501

        :return: The eq of this QueryProp.
        :rtype: OneOfstringnumberboolean
        """
        return self._eq

    @eq.setter
    def eq(self, eq):
        """Sets the eq of this QueryProp.

        Find items with a property that is equal to the specified value. For strings, a case-insensitive comparison must be performed.  # noqa: E501

        :param eq: The eq of this QueryProp.
        :type eq: OneOfstringnumberboolean
        """

        self._eq = eq

    @property
    def neq(self):
        """Gets the neq of this QueryProp.

        Find items that *don't* contain the specified value. For strings, a case-insensitive comparison must be performed.  # noqa: E501

        :return: The neq of this QueryProp.
        :rtype: OneOfstringnumberboolean
        """
        return self._neq

    @neq.setter
    def neq(self, neq):
        """Sets the neq of this QueryProp.

        Find items that *don't* contain the specified value. For strings, a case-insensitive comparison must be performed.  # noqa: E501

        :param neq: The neq of this QueryProp.
        :type neq: OneOfstringnumberboolean
        """

        self._neq = neq

    @property
    def gt(self):
        """Gets the gt of this QueryProp.

        Find items with a property value greater than the specified value.  # noqa: E501

        :return: The gt of this QueryProp.
        :rtype: OneOfDateTimenumber
        """
        return self._gt

    @gt.setter
    def gt(self, gt):
        """Sets the gt of this QueryProp.

        Find items with a property value greater than the specified value.  # noqa: E501

        :param gt: The gt of this QueryProp.
        :type gt: OneOfDateTimenumber
        """

        self._gt = gt

    @property
    def lt(self):
        """Gets the lt of this QueryProp.

        Find items with a property value less than the specified value.  # noqa: E501

        :return: The lt of this QueryProp.
        :rtype: OneOfDateTimenumber
        """
        return self._lt

    @lt.setter
    def lt(self, lt):
        """Sets the lt of this QueryProp.

        Find items with a property value less than the specified value.  # noqa: E501

        :param lt: The lt of this QueryProp.
        :type lt: OneOfDateTimenumber
        """

        self._lt = lt

    @property
    def gte(self):
        """Gets the gte of this QueryProp.

        Find items with a property value greater than or equal the specified value.  # noqa: E501

        :return: The gte of this QueryProp.
        :rtype: OneOfDateTimenumber
        """
        return self._gte

    @gte.setter
    def gte(self, gte):
        """Sets the gte of this QueryProp.

        Find items with a property value greater than or equal the specified value.  # noqa: E501

        :param gte: The gte of this QueryProp.
        :type gte: OneOfDateTimenumber
        """

        self._gte = gte

    @property
    def lte(self):
        """Gets the lte of this QueryProp.

        Find items with a property value less than or equal the specified value.  # noqa: E501

        :return: The lte of this QueryProp.
        :rtype: OneOfDateTimenumber
        """
        return self._lte

    @lte.setter
    def lte(self, lte):
        """Sets the lte of this QueryProp.

        Find items with a property value less than or equal the specified value.  # noqa: E501

        :param lte: The lte of this QueryProp.
        :type lte: OneOfDateTimenumber
        """

        self._lte = lte

    @property
    def starts_with(self):
        """Gets the starts_with of this QueryProp.

        Find items with a property that begins with the specified string. A case-insensitive comparison must be performed.  # noqa: E501

        :return: The starts_with of this QueryProp.
        :rtype: str
        """
        return self._starts_with

    @starts_with.setter
    def starts_with(self, starts_with):
        """Sets the starts_with of this QueryProp.

        Find items with a property that begins with the specified string. A case-insensitive comparison must be performed.  # noqa: E501

        :param starts_with: The starts_with of this QueryProp.
        :type starts_with: str
        """

        self._starts_with = starts_with

    @property
    def ends_with(self):
        """Gets the ends_with of this QueryProp.

        Find items with a property that ends with the specified string. A case-insensitive comparison must be performed.  # noqa: E501

        :return: The ends_with of this QueryProp.
        :rtype: str
        """
        return self._ends_with

    @ends_with.setter
    def ends_with(self, ends_with):
        """Sets the ends_with of this QueryProp.

        Find items with a property that ends with the specified string. A case-insensitive comparison must be performed.  # noqa: E501

        :param ends_with: The ends_with of this QueryProp.
        :type ends_with: str
        """

        self._ends_with = ends_with

    @property
    def contains(self):
        """Gets the contains of this QueryProp.

        Find items with a property that contains the specified literal string, e.g., matches \".*<STRING>.*\". A case-insensitive comparison must be performed.  # noqa: E501

        :return: The contains of this QueryProp.
        :rtype: str
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this QueryProp.

        Find items with a property that contains the specified literal string, e.g., matches \".*<STRING>.*\". A case-insensitive comparison must be performed.  # noqa: E501

        :param contains: The contains of this QueryProp.
        :type contains: str
        """

        self._contains = contains

    @property
    def _in(self):
        """Gets the _in of this QueryProp.

        Find items with a property that equals at least one entry in the specified array. A case-insensitive comparison must be performed.  # noqa: E501

        :return: The _in of this QueryProp.
        :rtype: List[OneOfstringnumber]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this QueryProp.

        Find items with a property that equals at least one entry in the specified array. A case-insensitive comparison must be performed.  # noqa: E501

        :param _in: The _in of this QueryProp.
        :type _in: List[OneOfstringnumber]
        """

        self.__in = _in
