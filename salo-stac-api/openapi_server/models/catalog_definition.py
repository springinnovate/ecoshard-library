# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.any_of_ur_istring import AnyOfURIstring
from openapi_server.models.link import Link
from openapi_server import util

from openapi_server.models.any_of_ur_istring import AnyOfURIstring  # noqa: E501
from openapi_server.models.link import Link  # noqa: E501

class CatalogDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stac_version=None, stac_extensions=None, id=None, title=None, description=None, links=None):  # noqa: E501
        """CatalogDefinition - a model defined in OpenAPI

        :param stac_version: The stac_version of this CatalogDefinition.  # noqa: E501
        :type stac_version: str
        :param stac_extensions: The stac_extensions of this CatalogDefinition.  # noqa: E501
        :type stac_extensions: List[AnyOfURIstring]
        :param id: The id of this CatalogDefinition.  # noqa: E501
        :type id: str
        :param title: The title of this CatalogDefinition.  # noqa: E501
        :type title: str
        :param description: The description of this CatalogDefinition.  # noqa: E501
        :type description: str
        :param links: The links of this CatalogDefinition.  # noqa: E501
        :type links: List[Link]
        """
        self.openapi_types = {
            'stac_version': str,
            'stac_extensions': List[AnyOfURIstring],
            'id': str,
            'title': str,
            'description': str,
            'links': List[Link]
        }

        self.attribute_map = {
            'stac_version': 'stac_version',
            'stac_extensions': 'stac_extensions',
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'links': 'links'
        }

        self._stac_version = stac_version
        self._stac_extensions = stac_extensions
        self._id = id
        self._title = title
        self._description = description
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalogDefinition of this CatalogDefinition.  # noqa: E501
        :rtype: CatalogDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stac_version(self):
        """Gets the stac_version of this CatalogDefinition.


        :return: The stac_version of this CatalogDefinition.
        :rtype: str
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this CatalogDefinition.


        :param stac_version: The stac_version of this CatalogDefinition.
        :type stac_version: str
        """
        if stac_version is None:
            raise ValueError("Invalid value for `stac_version`, must not be `None`")  # noqa: E501

        self._stac_version = stac_version

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this CatalogDefinition.


        :return: The stac_extensions of this CatalogDefinition.
        :rtype: List[AnyOfURIstring]
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this CatalogDefinition.


        :param stac_extensions: The stac_extensions of this CatalogDefinition.
        :type stac_extensions: List[AnyOfURIstring]
        """

        self._stac_extensions = stac_extensions

    @property
    def id(self):
        """Gets the id of this CatalogDefinition.

        identifier of the catalog used, for example, in URIs  # noqa: E501

        :return: The id of this CatalogDefinition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogDefinition.

        identifier of the catalog used, for example, in URIs  # noqa: E501

        :param id: The id of this CatalogDefinition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this CatalogDefinition.

        human readable title of the catalog  # noqa: E501

        :return: The title of this CatalogDefinition.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CatalogDefinition.

        human readable title of the catalog  # noqa: E501

        :param title: The title of this CatalogDefinition.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CatalogDefinition.

        Detailed multi-line description to fully explain the catalog or collection.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.  # noqa: E501

        :return: The description of this CatalogDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogDefinition.

        Detailed multi-line description to fully explain the catalog or collection.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.  # noqa: E501

        :param description: The description of this CatalogDefinition.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def links(self):
        """Gets the links of this CatalogDefinition.


        :return: The links of this CatalogDefinition.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CatalogDefinition.


        :param links: The links of this CatalogDefinition.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links
