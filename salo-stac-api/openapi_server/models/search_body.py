# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.bbox_filter import BboxFilter
from openapi_server.models.collections_filter import CollectionsFilter
from openapi_server.models.datetime_filter import DatetimeFilter
from openapi_server.models.fields import Fields
from openapi_server.models.fields_filter import FieldsFilter
from openapi_server.models.geometry import Geometry
from openapi_server.models.ids_filter import IdsFilter
from openapi_server.models.intersects_filter import IntersectsFilter
from openapi_server.models.limit_filter import LimitFilter
from openapi_server.models.query_filter import QueryFilter
from openapi_server.models.query_prop import QueryProp
from openapi_server.models.sort_filter import SortFilter
from openapi_server import util

from openapi_server.models.bbox_filter import BboxFilter  # noqa: E501
from openapi_server.models.collections_filter import CollectionsFilter  # noqa: E501
from openapi_server.models.datetime_filter import DatetimeFilter  # noqa: E501
from openapi_server.models.fields import Fields  # noqa: E501
from openapi_server.models.fields_filter import FieldsFilter  # noqa: E501
from openapi_server.models.geometry import Geometry  # noqa: E501
from openapi_server.models.ids_filter import IdsFilter  # noqa: E501
from openapi_server.models.intersects_filter import IntersectsFilter  # noqa: E501
from openapi_server.models.limit_filter import LimitFilter  # noqa: E501
from openapi_server.models.query_filter import QueryFilter  # noqa: E501
from openapi_server.models.query_prop import QueryProp  # noqa: E501
from openapi_server.models.sort_filter import SortFilter  # noqa: E501

class SearchBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox=None, datetime=None, intersects=None, collections=None, ids=None, limit=10, query=None, sortby=None, fields=None):  # noqa: E501
        """SearchBody - a model defined in OpenAPI

        :param bbox: The bbox of this SearchBody.  # noqa: E501
        :type bbox: List[float]
        :param datetime: The datetime of this SearchBody.  # noqa: E501
        :type datetime: str
        :param intersects: The intersects of this SearchBody.  # noqa: E501
        :type intersects: Geometry
        :param collections: The collections of this SearchBody.  # noqa: E501
        :type collections: List[str]
        :param ids: The ids of this SearchBody.  # noqa: E501
        :type ids: List[str]
        :param limit: The limit of this SearchBody.  # noqa: E501
        :type limit: int
        :param query: The query of this SearchBody.  # noqa: E501
        :type query: Dict[str, QueryProp]
        :param sortby: The sortby of this SearchBody.  # noqa: E501
        :type sortby: List[object]
        :param fields: The fields of this SearchBody.  # noqa: E501
        :type fields: Fields
        """
        self.openapi_types = {
            'bbox': List[float],
            'datetime': str,
            'intersects': Geometry,
            'collections': List[str],
            'ids': List[str],
            'limit': int,
            'query': Dict[str, QueryProp],
            'sortby': List[object],
            'fields': Fields
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'datetime': 'datetime',
            'intersects': 'intersects',
            'collections': 'collections',
            'ids': 'ids',
            'limit': 'limit',
            'query': 'query',
            'sortby': 'sortby',
            'fields': 'fields'
        }

        self._bbox = bbox
        self._datetime = datetime
        self._intersects = intersects
        self._collections = collections
        self._ids = ids
        self._limit = limit
        self._query = query
        self._sortby = sortby
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt) -> 'SearchBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The searchBody of this SearchBody.  # noqa: E501
        :rtype: SearchBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this SearchBody.

        Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2   * Lower left corner, coordinate axis 3 (optional)  * Upper right corner, coordinate axis 1  * Upper right corner, coordinate axis 2  * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.  Example: The bounding box of the New Zealand Exclusive Economic Zone in WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as `bbox=160.6,-55.95,-170,-25.89`.  # noqa: E501

        :return: The bbox of this SearchBody.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this SearchBody.

        Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2   * Lower left corner, coordinate axis 3 (optional)  * Upper right corner, coordinate axis 1  * Upper right corner, coordinate axis 2  * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.  For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.  Example: The bounding box of the New Zealand Exclusive Economic Zone in WGS 84 (from 160.6°E to 170°W and from 55.95°S to 25.89°S) would be represented in JSON as `[160.6, -55.95, -170, -25.89]` and in a query as `bbox=160.6,-55.95,-170,-25.89`.  # noqa: E501

        :param bbox: The bbox of this SearchBody.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def datetime(self):
        """Gets the datetime of this SearchBody.

        Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.  # noqa: E501

        :return: The datetime of this SearchBody.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """Sets the datetime of this SearchBody.

        Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \"2018-02-12T23:20:50Z\" * A closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" * Open intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"  Only features that have a temporal property that intersects the value of `datetime` are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.  # noqa: E501

        :param datetime: The datetime of this SearchBody.
        :type datetime: str
        """

        self._datetime = datetime

    @property
    def intersects(self):
        """Gets the intersects of this SearchBody.


        :return: The intersects of this SearchBody.
        :rtype: Geometry
        """
        return self._intersects

    @intersects.setter
    def intersects(self, intersects):
        """Sets the intersects of this SearchBody.


        :param intersects: The intersects of this SearchBody.
        :type intersects: Geometry
        """

        self._intersects = intersects

    @property
    def collections(self):
        """Gets the collections of this SearchBody.

        Array of Collection IDs to include in the search for items. Only Items in one of the provided Collections will be searched.  # noqa: E501

        :return: The collections of this SearchBody.
        :rtype: List[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SearchBody.

        Array of Collection IDs to include in the search for items. Only Items in one of the provided Collections will be searched.  # noqa: E501

        :param collections: The collections of this SearchBody.
        :type collections: List[str]
        """

        self._collections = collections

    @property
    def ids(self):
        """Gets the ids of this SearchBody.

        Array of Item ids to return. All other filter parameters that further restrict the number of search results are ignored  # noqa: E501

        :return: The ids of this SearchBody.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this SearchBody.

        Array of Item ids to return. All other filter parameters that further restrict the number of search results are ignored  # noqa: E501

        :param ids: The ids of this SearchBody.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def limit(self):
        """Gets the limit of this SearchBody.

        The maximum number of results to return (page size). Defaults to 10  # noqa: E501

        :return: The limit of this SearchBody.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchBody.

        The maximum number of results to return (page size). Defaults to 10  # noqa: E501

        :param limit: The limit of this SearchBody.
        :type limit: int
        """
        if limit is not None and limit > 10000:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `10000`")  # noqa: E501
        if limit is not None and limit < 1:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._limit = limit

    @property
    def query(self):
        """Gets the query of this SearchBody.

        Define which properties to query and the operatations to apply  # noqa: E501

        :return: The query of this SearchBody.
        :rtype: Dict[str, QueryProp]
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchBody.

        Define which properties to query and the operatations to apply  # noqa: E501

        :param query: The query of this SearchBody.
        :type query: Dict[str, QueryProp]
        """

        self._query = query

    @property
    def sortby(self):
        """Gets the sortby of this SearchBody.

        An array of objects containing a property name and sort direction.   # noqa: E501

        :return: The sortby of this SearchBody.
        :rtype: List[object]
        """
        return self._sortby

    @sortby.setter
    def sortby(self, sortby):
        """Sets the sortby of this SearchBody.

        An array of objects containing a property name and sort direction.   # noqa: E501

        :param sortby: The sortby of this SearchBody.
        :type sortby: List[object]
        """

        self._sortby = sortby

    @property
    def fields(self):
        """Gets the fields of this SearchBody.


        :return: The fields of this SearchBody.
        :rtype: Fields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchBody.


        :param fields: The fields of this SearchBody.
        :type fields: Fields
        """

        self._fields = fields
