# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.extent_spatial import ExtentSpatial
from openapi_server.models.extent_temporal import ExtentTemporal
from openapi_server import util

from openapi_server.models.extent_spatial import ExtentSpatial  # noqa: E501
from openapi_server.models.extent_temporal import ExtentTemporal  # noqa: E501

class Extent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spatial=None, temporal=None):  # noqa: E501
        """Extent - a model defined in OpenAPI

        :param spatial: The spatial of this Extent.  # noqa: E501
        :type spatial: ExtentSpatial
        :param temporal: The temporal of this Extent.  # noqa: E501
        :type temporal: ExtentTemporal
        """
        self.openapi_types = {
            'spatial': ExtentSpatial,
            'temporal': ExtentTemporal
        }

        self.attribute_map = {
            'spatial': 'spatial',
            'temporal': 'temporal'
        }

        self._spatial = spatial
        self._temporal = temporal

    @classmethod
    def from_dict(cls, dikt) -> 'Extent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The extent of this Extent.  # noqa: E501
        :rtype: Extent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spatial(self):
        """Gets the spatial of this Extent.


        :return: The spatial of this Extent.
        :rtype: ExtentSpatial
        """
        return self._spatial

    @spatial.setter
    def spatial(self, spatial):
        """Sets the spatial of this Extent.


        :param spatial: The spatial of this Extent.
        :type spatial: ExtentSpatial
        """
        if spatial is None:
            raise ValueError("Invalid value for `spatial`, must not be `None`")  # noqa: E501

        self._spatial = spatial

    @property
    def temporal(self):
        """Gets the temporal of this Extent.


        :return: The temporal of this Extent.
        :rtype: ExtentTemporal
        """
        return self._temporal

    @temporal.setter
    def temporal(self, temporal):
        """Sets the temporal of this Extent.


        :param temporal: The temporal of this Extent.
        :type temporal: ExtentTemporal
        """
        if temporal is None:
            raise ValueError("Invalid value for `temporal`, must not be `None`")  # noqa: E501

        self._temporal = temporal
