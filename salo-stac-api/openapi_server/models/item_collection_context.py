# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ItemCollectionContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit=None, matched=None, returned=None):  # noqa: E501
        """ItemCollectionContext - a model defined in OpenAPI

        :param limit: The limit of this ItemCollectionContext.  # noqa: E501
        :type limit: int
        :param matched: The matched of this ItemCollectionContext.  # noqa: E501
        :type matched: int
        :param returned: The returned of this ItemCollectionContext.  # noqa: E501
        :type returned: int
        """
        self.openapi_types = {
            'limit': int,
            'matched': int,
            'returned': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'matched': 'matched',
            'returned': 'returned'
        }

        self._limit = limit
        self._matched = matched
        self._returned = returned

    @classmethod
    def from_dict(cls, dikt) -> 'ItemCollectionContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The itemCollection_context of this ItemCollectionContext.  # noqa: E501
        :rtype: ItemCollectionContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this ItemCollectionContext.


        :return: The limit of this ItemCollectionContext.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ItemCollectionContext.


        :param limit: The limit of this ItemCollectionContext.
        :type limit: int
        """
        if limit is not None and limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._limit = limit

    @property
    def matched(self):
        """Gets the matched of this ItemCollectionContext.


        :return: The matched of this ItemCollectionContext.
        :rtype: int
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this ItemCollectionContext.


        :param matched: The matched of this ItemCollectionContext.
        :type matched: int
        """
        if matched is not None and matched < 0:  # noqa: E501
            raise ValueError("Invalid value for `matched`, must be a value greater than or equal to `0`")  # noqa: E501

        self._matched = matched

    @property
    def returned(self):
        """Gets the returned of this ItemCollectionContext.


        :return: The returned of this ItemCollectionContext.
        :rtype: int
        """
        return self._returned

    @returned.setter
    def returned(self, returned):
        """Sets the returned of this ItemCollectionContext.


        :param returned: The returned of this ItemCollectionContext.
        :type returned: int
        """
        if returned is None:
            raise ValueError("Invalid value for `returned`, must not be `None`")  # noqa: E501
        if returned is not None and returned < 0:  # noqa: E501
            raise ValueError("Invalid value for `returned`, must be a value greater than or equal to `0`")  # noqa: E501

        self._returned = returned
